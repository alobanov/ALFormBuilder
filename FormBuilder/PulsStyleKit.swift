//
//  PulsStyleKit.swift
//  Puls
//
//  Created by Lobanov Aleksey on 27/10/2017.
//  Copyright Â© 2017 ABAK. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class PulsStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let colorErrorValidation: UIColor = UIColor(red: 0.812, green: 0.031, blue: 0.110, alpha: 1.000)
        static let colorOkValidation2: UIColor = UIColor(red: 0.306, green: 0.639, blue: 0.243, alpha: 1.000)
        static var imageOfCloseGray: UIImage?
        static var closeGrayTargets: [AnyObject]?
        static var imageOfTfSuccessIcon: UIImage?
        static var tfSuccessIconTargets: [AnyObject]?
        static var imageOfArrowBack: UIImage?
        static var arrowBackTargets: [AnyObject]?
        static var imageOfPhotodevice: UIImage?
        static var photodeviceTargets: [AnyObject]?
        static var imageOfTfAlertIcon: UIImage?
        static var tfAlertIconTargets: [AnyObject]?
        static var imageOfTfAlertIconStar: UIImage?
        static var tfAlertIconStarTargets: [AnyObject]?
        static var imageOfCloseWhite: UIImage?
        static var closeWhiteTargets: [AnyObject]?
        static var imageOfAttach: UIImage?
        static var attachTargets: [AnyObject]?
        static var imageOfBell: UIImage?
        static var bellTargets: [AnyObject]?
        static var imageOfCallback: UIImage?
        static var callbackTargets: [AnyObject]?
        static var imageOfArrowDown: UIImage?
        static var arrowDownTargets: [AnyObject]?
        static var imageOfSort: UIImage?
        static var sortTargets: [AnyObject]?
        static var imageOfFilterOff: UIImage?
        static var filterOffTargets: [AnyObject]?
        static var imageOfFilterOn: UIImage?
        static var filterOnTargets: [AnyObject]?
        static var imageOfPhone: UIImage?
        static var phoneTargets: [AnyObject]?
        static var imageOfMail: UIImage?
        static var mailTargets: [AnyObject]?
        static var imageOfCalendar: UIImage?
        static var calendarTargets: [AnyObject]?
        static var imageOfDone: UIImage?
        static var doneTargets: [AnyObject]?
        static var imageOfQuery: UIImage?
        static var queryTargets: [AnyObject]?
        static var imageOfTrophy: UIImage?
        static var trophyTargets: [AnyObject]?
        static var imageOfSearchIcon: UIImage?
        static var searchIconTargets: [AnyObject]?
        static var imageOfFavoritesIcon: UIImage?
        static var favoritesIconTargets: [AnyObject]?
        static var imageOfFeedbackIcon: UIImage?
        static var feedbackIconTargets: [AnyObject]?
        static var imageOfAutorizedPofileIcon: UIImage?
        static var autorizedPofileIconTargets: [AnyObject]?
        static var imageOfUnautorizedPofileIcon: UIImage?
        static var unautorizedPofileIconTargets: [AnyObject]?
    }

    //// Colors

    @objc dynamic public class var colorErrorValidation: UIColor { return Cache.colorErrorValidation }
    @objc dynamic public class var colorOkValidation2: UIColor { return Cache.colorOkValidation2 }

    //// Drawing Methods

    @objc dynamic public class func drawCloseGray() {
        //// Color Declarations
        let gray = UIColor(red: 0.592, green: 0.592, blue: 0.592, alpha: 1.000)

        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 21.14, y: 3.26))
        bezier3Path.addCurve(to: CGPoint(x: 22, y: 4.13), controlPoint1: CGPoint(x: 21.14, y: 3.26), controlPoint2: CGPoint(x: 21.47, y: 3.59))
        bezier3Path.addCurve(to: CGPoint(x: 19.62, y: 6.55), controlPoint1: CGPoint(x: 21.4, y: 4.74), controlPoint2: CGPoint(x: 20.55, y: 5.6))
        bezier3Path.addCurve(to: CGPoint(x: 13.86, y: 12.4), controlPoint1: CGPoint(x: 17.37, y: 8.83), controlPoint2: CGPoint(x: 14.64, y: 11.61))
        bezier3Path.addCurve(to: CGPoint(x: 14.08, y: 12.63), controlPoint1: CGPoint(x: 14, y: 12.55), controlPoint2: CGPoint(x: 14.08, y: 12.63))
        bezier3Path.addCurve(to: CGPoint(x: 13.86, y: 12.86), controlPoint1: CGPoint(x: 14.08, y: 12.63), controlPoint2: CGPoint(x: 14, y: 12.71))
        bezier3Path.addCurve(to: CGPoint(x: 22, y: 21.13), controlPoint1: CGPoint(x: 14.97, y: 13.99), controlPoint2: CGPoint(x: 19.97, y: 19.07))
        bezier3Path.addCurve(to: CGPoint(x: 21.14, y: 22), controlPoint1: CGPoint(x: 21.47, y: 21.67), controlPoint2: CGPoint(x: 21.14, y: 22))
        bezier3Path.addCurve(to: CGPoint(x: 13, y: 13.73), controlPoint1: CGPoint(x: 21.14, y: 22), controlPoint2: CGPoint(x: 15.43, y: 16.2))
        bezier3Path.addCurve(to: CGPoint(x: 4.86, y: 22), controlPoint1: CGPoint(x: 10.57, y: 16.2), controlPoint2: CGPoint(x: 4.86, y: 22))
        bezier3Path.addCurve(to: CGPoint(x: 4, y: 21.13), controlPoint1: CGPoint(x: 4.86, y: 22), controlPoint2: CGPoint(x: 4.53, y: 21.67))
        bezier3Path.addCurve(to: CGPoint(x: 12.14, y: 12.86), controlPoint1: CGPoint(x: 6.03, y: 19.07), controlPoint2: CGPoint(x: 11.03, y: 13.99))
        bezier3Path.addCurve(to: CGPoint(x: 11.92, y: 12.63), controlPoint1: CGPoint(x: 12, y: 12.71), controlPoint2: CGPoint(x: 11.92, y: 12.63))
        bezier3Path.addCurve(to: CGPoint(x: 12.14, y: 12.4), controlPoint1: CGPoint(x: 11.92, y: 12.63), controlPoint2: CGPoint(x: 12, y: 12.55))
        bezier3Path.addCurve(to: CGPoint(x: 6.38, y: 6.55), controlPoint1: CGPoint(x: 11.36, y: 11.61), controlPoint2: CGPoint(x: 8.63, y: 8.83))
        bezier3Path.addCurve(to: CGPoint(x: 4, y: 4.13), controlPoint1: CGPoint(x: 5.45, y: 5.6), controlPoint2: CGPoint(x: 4.6, y: 4.74))
        bezier3Path.addCurve(to: CGPoint(x: 4.86, y: 3.26), controlPoint1: CGPoint(x: 4.53, y: 3.59), controlPoint2: CGPoint(x: 4.86, y: 3.26))
        bezier3Path.addCurve(to: CGPoint(x: 7.76, y: 6.2), controlPoint1: CGPoint(x: 4.86, y: 3.26), controlPoint2: CGPoint(x: 6.14, y: 4.57))
        bezier3Path.addCurve(to: CGPoint(x: 13, y: 11.53), controlPoint1: CGPoint(x: 9.54, y: 8.02), controlPoint2: CGPoint(x: 11.72, y: 10.23))
        bezier3Path.addCurve(to: CGPoint(x: 18.24, y: 6.2), controlPoint1: CGPoint(x: 14.28, y: 10.23), controlPoint2: CGPoint(x: 16.46, y: 8.02))
        bezier3Path.addCurve(to: CGPoint(x: 21.14, y: 3.26), controlPoint1: CGPoint(x: 19.81, y: 4.62), controlPoint2: CGPoint(x: 21.06, y: 3.34))
        bezier3Path.addLine(to: CGPoint(x: 21.14, y: 3.26))
        bezier3Path.close()
        gray.setFill()
        bezier3Path.fill()
    }

    @objc dynamic public class func drawTfSuccessIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 15.02, y: 7))
        clipPath.addCurve(to: CGPoint(x: 14.17, y: 7.32), controlPoint1: CGPoint(x: 14.72, y: 6.99), controlPoint2: CGPoint(x: 14.41, y: 7.09))
        clipPath.addLine(to: CGPoint(x: 8.92, y: 12.58))
        clipPath.addLine(to: CGPoint(x: 5.93, y: 9.6))
        clipPath.addCurve(to: CGPoint(x: 5.08, y: 9.27), controlPoint1: CGPoint(x: 5.7, y: 9.36), controlPoint2: CGPoint(x: 5.39, y: 9.26))
        clipPath.addCurve(to: CGPoint(x: 4.33, y: 9.6), controlPoint1: CGPoint(x: 4.81, y: 9.28), controlPoint2: CGPoint(x: 4.54, y: 9.39))
        clipPath.addCurve(to: CGPoint(x: 4, y: 10.36), controlPoint1: CGPoint(x: 4.11, y: 9.81), controlPoint2: CGPoint(x: 4.01, y: 10.08))
        clipPath.addCurve(to: CGPoint(x: 4.33, y: 11.2), controlPoint1: CGPoint(x: 3.99, y: 10.66), controlPoint2: CGPoint(x: 4.09, y: 10.97))
        clipPath.addLine(to: CGPoint(x: 8.11, y: 14.99))
        clipPath.addCurve(to: CGPoint(x: 8.92, y: 15.33), controlPoint1: CGPoint(x: 8.34, y: 15.21), controlPoint2: CGPoint(x: 8.63, y: 15.33))
        clipPath.addCurve(to: CGPoint(x: 9.72, y: 14.99), controlPoint1: CGPoint(x: 9.21, y: 15.33), controlPoint2: CGPoint(x: 9.5, y: 15.21))
        clipPath.addLine(to: CGPoint(x: 15.78, y: 8.93))
        clipPath.addCurve(to: CGPoint(x: 16.1, y: 8.08), controlPoint1: CGPoint(x: 16.01, y: 8.7), controlPoint2: CGPoint(x: 16.12, y: 8.39))
        clipPath.addCurve(to: CGPoint(x: 15.78, y: 7.32), controlPoint1: CGPoint(x: 16.09, y: 7.81), controlPoint2: CGPoint(x: 15.99, y: 7.54))
        clipPath.addCurve(to: CGPoint(x: 15.02, y: 7), controlPoint1: CGPoint(x: 15.57, y: 7.11), controlPoint2: CGPoint(x: 15.3, y: 7.01))
        clipPath.addLine(to: CGPoint(x: 15.02, y: 7))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -1, y: 1.98, width: 22.1, height: 18.35))
        PulsStyleKit.colorOkValidation2.setFill()
        rectanglePath.fill()


        context.endTransparencyLayer()
        context.restoreGState()
    }

    @objc dynamic public class func drawArrowBack() {
        //// Color Declarations
        let gray = UIColor(red: 0.592, green: 0.592, blue: 0.592, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16.81, y: 3.26))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 4.46), controlPoint1: CGPoint(x: 16.81, y: 3.26), controlPoint2: CGPoint(x: 17.26, y: 3.72))
        bezierPath.addCurve(to: CGPoint(x: 14.69, y: 7.78), controlPoint1: CGPoint(x: 17.17, y: 5.29), controlPoint2: CGPoint(x: 15.99, y: 6.48))
        bezierPath.addCurve(to: CGPoint(x: 6.38, y: 16.13), controlPoint1: CGPoint(x: 11, y: 11.49), controlPoint2: CGPoint(x: 6.38, y: 16.13))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 27.8), controlPoint1: CGPoint(x: 6.38, y: 16.13), controlPoint2: CGPoint(x: 14.82, y: 24.61))
        bezierPath.addCurve(to: CGPoint(x: 16.81, y: 29), controlPoint1: CGPoint(x: 17.26, y: 28.54), controlPoint2: CGPoint(x: 16.81, y: 29))
        bezierPath.addLine(to: CGPoint(x: 4, y: 16.13))
        bezierPath.addCurve(to: CGPoint(x: 12.78, y: 7.3), controlPoint1: CGPoint(x: 4, y: 16.13), controlPoint2: CGPoint(x: 9.03, y: 11.08))
        bezierPath.addCurve(to: CGPoint(x: 16.81, y: 3.26), controlPoint1: CGPoint(x: 15.02, y: 5.05), controlPoint2: CGPoint(x: 16.81, y: 3.26))
        bezierPath.addLine(to: CGPoint(x: 16.81, y: 3.26))
        bezierPath.close()
        gray.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawPhotodevice() {
        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 18, y: 18, width: 12, height: 12))
        white.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 32.57, y: 14.43))
        bezierPath.addLine(to: CGPoint(x: 31.28, y: 14.43))
        bezierPath.addLine(to: CGPoint(x: 30.35, y: 12.15))
        bezierPath.addCurve(to: CGPoint(x: 28.5, y: 11), controlPoint1: CGPoint(x: 30, y: 11.44), controlPoint2: CGPoint(x: 29.29, y: 11))
        bezierPath.addLine(to: CGPoint(x: 19.5, y: 11))
        bezierPath.addCurve(to: CGPoint(x: 17.65, y: 12.14), controlPoint1: CGPoint(x: 18.71, y: 11), controlPoint2: CGPoint(x: 18, y: 11.44))
        bezierPath.addLine(to: CGPoint(x: 16.72, y: 14.43))
        bezierPath.addLine(to: CGPoint(x: 15.43, y: 14.43))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 17.86), controlPoint1: CGPoint(x: 13.53, y: 14.43), controlPoint2: CGPoint(x: 12, y: 15.96))
        bezierPath.addLine(to: CGPoint(x: 12, y: 31.57))
        bezierPath.addCurve(to: CGPoint(x: 15.43, y: 35), controlPoint1: CGPoint(x: 12, y: 33.47), controlPoint2: CGPoint(x: 13.53, y: 35))
        bezierPath.addLine(to: CGPoint(x: 32.57, y: 35))
        bezierPath.addCurve(to: CGPoint(x: 36, y: 31.57), controlPoint1: CGPoint(x: 34.47, y: 35), controlPoint2: CGPoint(x: 36, y: 33.47))
        bezierPath.addLine(to: CGPoint(x: 36, y: 17.86))
        bezierPath.addCurve(to: CGPoint(x: 32.57, y: 14.43), controlPoint1: CGPoint(x: 36, y: 15.96), controlPoint2: CGPoint(x: 34.47, y: 14.43))
        bezierPath.addLine(to: CGPoint(x: 32.57, y: 14.43))
        bezierPath.close()
        white.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
    }

    @objc dynamic public class func drawTfAlertIcon() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 9, y: 11.9))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 13), controlPoint1: CGPoint(x: 9, y: 12.51), controlPoint2: CGPoint(x: 9.45, y: 13))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 11.9), controlPoint1: CGPoint(x: 10.55, y: 13), controlPoint2: CGPoint(x: 11, y: 12.51))
        bezierPath.addLine(to: CGPoint(x: 11.93, y: 4.75))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 4.2), controlPoint1: CGPoint(x: 11.97, y: 4.58), controlPoint2: CGPoint(x: 12, y: 4.39))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 12, y: 2.98), controlPoint2: CGPoint(x: 11.1, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 4.2), controlPoint1: CGPoint(x: 8.89, y: 2), controlPoint2: CGPoint(x: 8, y: 2.98))
        bezierPath.addCurve(to: CGPoint(x: 8.07, y: 4.75), controlPoint1: CGPoint(x: 8, y: 4.39), controlPoint2: CGPoint(x: 8.03, y: 4.58))
        bezierPath.addLine(to: CGPoint(x: 9, y: 11.9))
        bezierPath.addLine(to: CGPoint(x: 9, y: 11.9))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 8.5, y: 17.5), controlPoint1: CGPoint(x: 9.17, y: 16), controlPoint2: CGPoint(x: 8.5, y: 16.67))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 19), controlPoint1: CGPoint(x: 8.5, y: 18.33), controlPoint2: CGPoint(x: 9.17, y: 19))
        bezierPath.addCurve(to: CGPoint(x: 11.5, y: 17.5), controlPoint1: CGPoint(x: 10.83, y: 19), controlPoint2: CGPoint(x: 11.5, y: 18.33))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 16), controlPoint1: CGPoint(x: 11.5, y: 16.67), controlPoint2: CGPoint(x: 10.83, y: 16))
        bezierPath.addLine(to: CGPoint(x: 10, y: 16))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        UIColor.red.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawTfAlertIconStar() {

        //// tfAlertStar Drawing
        let tfAlertStarRect = CGRect(x: 2, y: -2, width: 16, height: 27)
        let tfAlertStarStyle = NSMutableParagraphStyle()
        tfAlertStarStyle.alignment = .center
        let tfAlertStarFontAttributes = [
            .font: UIFont(name: "AvenirNext-Regular", size: 26)!,
            .foregroundColor: PulsStyleKit.colorErrorValidation,
            .paragraphStyle: tfAlertStarStyle,
        ] as [NSAttributedStringKey: Any]

        "*".draw(in: tfAlertStarRect, withAttributes: tfAlertStarFontAttributes)
    }

    @objc dynamic public class func drawCloseBtn(customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 17, height: 17))
        customColor.setFill()
        ovalPath.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 7, y: 7))
        bezier3Path.addLine(to: CGPoint(x: 14, y: 14))
        bezier3Path.move(to: CGPoint(x: 14, y: 7))
        bezier3Path.addLine(to: CGPoint(x: 7, y: 14))
        white.setFill()
        bezier3Path.fill()
        white.setStroke()
        bezier3Path.lineWidth = 2
        bezier3Path.stroke()
    }

    @objc dynamic public class func drawCloseWhite() {
        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 21.14, y: 3.26))
        bezier3Path.addCurve(to: CGPoint(x: 22, y: 4.13), controlPoint1: CGPoint(x: 21.14, y: 3.26), controlPoint2: CGPoint(x: 21.47, y: 3.59))
        bezier3Path.addCurve(to: CGPoint(x: 19.62, y: 6.55), controlPoint1: CGPoint(x: 21.4, y: 4.74), controlPoint2: CGPoint(x: 20.55, y: 5.6))
        bezier3Path.addCurve(to: CGPoint(x: 13.86, y: 12.4), controlPoint1: CGPoint(x: 17.37, y: 8.83), controlPoint2: CGPoint(x: 14.64, y: 11.61))
        bezier3Path.addCurve(to: CGPoint(x: 14.08, y: 12.63), controlPoint1: CGPoint(x: 14, y: 12.55), controlPoint2: CGPoint(x: 14.08, y: 12.63))
        bezier3Path.addCurve(to: CGPoint(x: 13.86, y: 12.86), controlPoint1: CGPoint(x: 14.08, y: 12.63), controlPoint2: CGPoint(x: 14, y: 12.71))
        bezier3Path.addCurve(to: CGPoint(x: 22, y: 21.13), controlPoint1: CGPoint(x: 14.97, y: 13.99), controlPoint2: CGPoint(x: 19.97, y: 19.07))
        bezier3Path.addCurve(to: CGPoint(x: 21.14, y: 22), controlPoint1: CGPoint(x: 21.47, y: 21.67), controlPoint2: CGPoint(x: 21.14, y: 22))
        bezier3Path.addCurve(to: CGPoint(x: 13, y: 13.73), controlPoint1: CGPoint(x: 21.14, y: 22), controlPoint2: CGPoint(x: 15.43, y: 16.2))
        bezier3Path.addCurve(to: CGPoint(x: 4.86, y: 22), controlPoint1: CGPoint(x: 10.57, y: 16.2), controlPoint2: CGPoint(x: 4.86, y: 22))
        bezier3Path.addCurve(to: CGPoint(x: 4, y: 21.13), controlPoint1: CGPoint(x: 4.86, y: 22), controlPoint2: CGPoint(x: 4.53, y: 21.67))
        bezier3Path.addCurve(to: CGPoint(x: 12.14, y: 12.86), controlPoint1: CGPoint(x: 6.03, y: 19.07), controlPoint2: CGPoint(x: 11.03, y: 13.99))
        bezier3Path.addCurve(to: CGPoint(x: 11.92, y: 12.63), controlPoint1: CGPoint(x: 12, y: 12.71), controlPoint2: CGPoint(x: 11.92, y: 12.63))
        bezier3Path.addCurve(to: CGPoint(x: 12.14, y: 12.4), controlPoint1: CGPoint(x: 11.92, y: 12.63), controlPoint2: CGPoint(x: 12, y: 12.55))
        bezier3Path.addCurve(to: CGPoint(x: 6.38, y: 6.55), controlPoint1: CGPoint(x: 11.36, y: 11.61), controlPoint2: CGPoint(x: 8.63, y: 8.83))
        bezier3Path.addCurve(to: CGPoint(x: 4, y: 4.13), controlPoint1: CGPoint(x: 5.45, y: 5.6), controlPoint2: CGPoint(x: 4.6, y: 4.74))
        bezier3Path.addCurve(to: CGPoint(x: 4.86, y: 3.26), controlPoint1: CGPoint(x: 4.53, y: 3.59), controlPoint2: CGPoint(x: 4.86, y: 3.26))
        bezier3Path.addCurve(to: CGPoint(x: 7.76, y: 6.2), controlPoint1: CGPoint(x: 4.86, y: 3.26), controlPoint2: CGPoint(x: 6.14, y: 4.57))
        bezier3Path.addCurve(to: CGPoint(x: 13, y: 11.53), controlPoint1: CGPoint(x: 9.54, y: 8.02), controlPoint2: CGPoint(x: 11.72, y: 10.23))
        bezier3Path.addCurve(to: CGPoint(x: 18.24, y: 6.2), controlPoint1: CGPoint(x: 14.28, y: 10.23), controlPoint2: CGPoint(x: 16.46, y: 8.02))
        bezier3Path.addCurve(to: CGPoint(x: 21.14, y: 3.26), controlPoint1: CGPoint(x: 19.81, y: 4.62), controlPoint2: CGPoint(x: 21.06, y: 3.34))
        bezier3Path.addLine(to: CGPoint(x: 21.14, y: 3.26))
        bezier3Path.close()
        white.setFill()
        bezier3Path.fill()
        white.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()
    }

    @objc dynamic public class func drawClock(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 30), resizing: ResizingBehavior = .aspectFit, customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 30)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 24, y: 8.72))
        bezierPath.addLine(to: CGPoint(x: 19.4, y: 4.86))
        bezierPath.addLine(to: CGPoint(x: 18.11, y: 6.39))
        bezierPath.addLine(to: CGPoint(x: 22.71, y: 10.25))
        bezierPath.addLine(to: CGPoint(x: 24, y: 8.72))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9.88, y: 6.39))
        bezierPath.addLine(to: CGPoint(x: 8.6, y: 4.86))
        bezierPath.addLine(to: CGPoint(x: 4, y: 8.71))
        bezierPath.addLine(to: CGPoint(x: 5.29, y: 10.24))
        bezierPath.addLine(to: CGPoint(x: 9.88, y: 6.39))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14.5, y: 11))
        bezierPath.addLine(to: CGPoint(x: 13, y: 11))
        bezierPath.addLine(to: CGPoint(x: 13, y: 17))
        bezierPath.addLine(to: CGPoint(x: 17.75, y: 19.85))
        bezierPath.addLine(to: CGPoint(x: 18.5, y: 18.62))
        bezierPath.addLine(to: CGPoint(x: 14.5, y: 16.25))
        bezierPath.addLine(to: CGPoint(x: 14.5, y: 11))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14, y: 7))
        bezierPath.addCurve(to: CGPoint(x: 5, y: 16), controlPoint1: CGPoint(x: 9.03, y: 7), controlPoint2: CGPoint(x: 5, y: 11.03))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 25), controlPoint1: CGPoint(x: 5, y: 20.97), controlPoint2: CGPoint(x: 9.02, y: 25))
        bezierPath.addCurve(to: CGPoint(x: 23, y: 16), controlPoint1: CGPoint(x: 18.97, y: 25), controlPoint2: CGPoint(x: 23, y: 20.97))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 7), controlPoint1: CGPoint(x: 23, y: 11.03), controlPoint2: CGPoint(x: 18.97, y: 7))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14, y: 23))
        bezierPath.addCurve(to: CGPoint(x: 7, y: 16), controlPoint1: CGPoint(x: 10.13, y: 23), controlPoint2: CGPoint(x: 7, y: 19.87))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 9), controlPoint1: CGPoint(x: 7, y: 12.13), controlPoint2: CGPoint(x: 10.13, y: 9))
        bezierPath.addCurve(to: CGPoint(x: 21, y: 16), controlPoint1: CGPoint(x: 17.87, y: 9), controlPoint2: CGPoint(x: 21, y: 12.13))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 23), controlPoint1: CGPoint(x: 21, y: 19.87), controlPoint2: CGPoint(x: 17.87, y: 23))
        bezierPath.close()
        customColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawAttach(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Color Declarations
        let gray = UIColor(red: 0.592, green: 0.592, blue: 0.592, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16.5, y: 6))
        bezierPath.addLine(to: CGPoint(x: 16.5, y: 17.5))
        bezierPath.addCurve(to: CGPoint(x: 12.5, y: 21.5), controlPoint1: CGPoint(x: 16.5, y: 19.71), controlPoint2: CGPoint(x: 14.71, y: 21.5))
        bezierPath.addCurve(to: CGPoint(x: 8.5, y: 17.5), controlPoint1: CGPoint(x: 10.29, y: 21.5), controlPoint2: CGPoint(x: 8.5, y: 19.71))
        bezierPath.addLine(to: CGPoint(x: 8.5, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 2.5), controlPoint1: CGPoint(x: 8.5, y: 3.62), controlPoint2: CGPoint(x: 9.62, y: 2.5))
        bezierPath.addCurve(to: CGPoint(x: 13.5, y: 5), controlPoint1: CGPoint(x: 12.38, y: 2.5), controlPoint2: CGPoint(x: 13.5, y: 3.62))
        bezierPath.addLine(to: CGPoint(x: 13.5, y: 15.5))
        bezierPath.addCurve(to: CGPoint(x: 12.5, y: 16.5), controlPoint1: CGPoint(x: 13.5, y: 16.05), controlPoint2: CGPoint(x: 13.05, y: 16.5))
        bezierPath.addCurve(to: CGPoint(x: 11.5, y: 15.5), controlPoint1: CGPoint(x: 11.95, y: 16.5), controlPoint2: CGPoint(x: 11.5, y: 16.05))
        bezierPath.addLine(to: CGPoint(x: 11.5, y: 6))
        bezierPath.addLine(to: CGPoint(x: 10, y: 6))
        bezierPath.addLine(to: CGPoint(x: 10, y: 15.5))
        bezierPath.addCurve(to: CGPoint(x: 12.5, y: 18), controlPoint1: CGPoint(x: 10, y: 16.88), controlPoint2: CGPoint(x: 11.12, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 15.5), controlPoint1: CGPoint(x: 13.88, y: 18), controlPoint2: CGPoint(x: 15, y: 16.88))
        bezierPath.addLine(to: CGPoint(x: 15, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 15, y: 2.79), controlPoint2: CGPoint(x: 13.21, y: 1))
        bezierPath.addCurve(to: CGPoint(x: 7, y: 5), controlPoint1: CGPoint(x: 8.79, y: 1), controlPoint2: CGPoint(x: 7, y: 2.79))
        bezierPath.addLine(to: CGPoint(x: 7, y: 17.5))
        bezierPath.addCurve(to: CGPoint(x: 12.5, y: 23), controlPoint1: CGPoint(x: 7, y: 20.54), controlPoint2: CGPoint(x: 9.46, y: 23))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 17.5), controlPoint1: CGPoint(x: 15.54, y: 23), controlPoint2: CGPoint(x: 18, y: 20.54))
        bezierPath.addLine(to: CGPoint(x: 18, y: 6))
        bezierPath.addLine(to: CGPoint(x: 16.5, y: 6))
        bezierPath.close()
        gray.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBell(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 30)


        //// Color Declarations
        let blue = UIColor(red: 0.000, green: 0.478, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.01, y: 24.01))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 26), controlPoint1: CGPoint(x: 10.01, y: 25.11), controlPoint2: CGPoint(x: 10.9, y: 26))
        bezierPath.addCurve(to: CGPoint(x: 13.99, y: 24.01), controlPoint1: CGPoint(x: 13.1, y: 26), controlPoint2: CGPoint(x: 13.99, y: 25.11))
        bezierPath.addLine(to: CGPoint(x: 10.01, y: 24.01))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 18.88, y: 19.82))
        bezierPath.addLine(to: CGPoint(x: 18.88, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 13.59, y: 7.31), controlPoint1: CGPoint(x: 18.88, y: 10.75), controlPoint2: CGPoint(x: 16.63, y: 8.03))
        bezierPath.addLine(to: CGPoint(x: 13.59, y: 6.59))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 5), controlPoint1: CGPoint(x: 13.59, y: 5.71), controlPoint2: CGPoint(x: 12.88, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 10.41, y: 6.59), controlPoint1: CGPoint(x: 11.12, y: 5), controlPoint2: CGPoint(x: 10.41, y: 5.71))
        bezierPath.addLine(to: CGPoint(x: 10.41, y: 7.31))
        bezierPath.addCurve(to: CGPoint(x: 5.12, y: 14), controlPoint1: CGPoint(x: 7.37, y: 8.03), controlPoint2: CGPoint(x: 5.12, y: 10.75))
        bezierPath.addLine(to: CGPoint(x: 5.12, y: 19.82))
        bezierPath.addLine(to: CGPoint(x: 3, y: 21.94))
        bezierPath.addLine(to: CGPoint(x: 3, y: 23))
        bezierPath.addLine(to: CGPoint(x: 21, y: 23))
        bezierPath.addLine(to: CGPoint(x: 21, y: 21.94))
        bezierPath.addLine(to: CGPoint(x: 18.88, y: 19.82))
        bezierPath.close()
        blue.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCallback(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 30)


        //// Color Declarations
        let blue = UIColor(red: 0.000, green: 0.478, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6.62, y: 13.79))
        bezierPath.addCurve(to: CGPoint(x: 13.21, y: 20.38), controlPoint1: CGPoint(x: 8.06, y: 16.62), controlPoint2: CGPoint(x: 10.38, y: 18.93))
        bezierPath.addLine(to: CGPoint(x: 15.41, y: 18.18))
        bezierPath.addCurve(to: CGPoint(x: 16.43, y: 17.94), controlPoint1: CGPoint(x: 15.68, y: 17.91), controlPoint2: CGPoint(x: 16.08, y: 17.82))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 18.51), controlPoint1: CGPoint(x: 17.55, y: 18.31), controlPoint2: CGPoint(x: 18.76, y: 18.51))
        bezierPath.addCurve(to: CGPoint(x: 21, y: 19.51), controlPoint1: CGPoint(x: 20.55, y: 18.51), controlPoint2: CGPoint(x: 21, y: 18.96))
        bezierPath.addLine(to: CGPoint(x: 21, y: 23))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 24), controlPoint1: CGPoint(x: 21, y: 23.55), controlPoint2: CGPoint(x: 20.55, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 7), controlPoint1: CGPoint(x: 10.61, y: 24), controlPoint2: CGPoint(x: 3, y: 16.39))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 6), controlPoint1: CGPoint(x: 3, y: 6.45), controlPoint2: CGPoint(x: 3.45, y: 6))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 8.5, y: 7), controlPoint1: CGPoint(x: 8.05, y: 6), controlPoint2: CGPoint(x: 8.5, y: 6.45))
        bezierPath.addCurve(to: CGPoint(x: 9.07, y: 10.57), controlPoint1: CGPoint(x: 8.5, y: 8.25), controlPoint2: CGPoint(x: 8.7, y: 9.45))
        bezierPath.addCurve(to: CGPoint(x: 8.82, y: 11.59), controlPoint1: CGPoint(x: 9.18, y: 10.92), controlPoint2: CGPoint(x: 9.1, y: 11.31))
        bezierPath.addLine(to: CGPoint(x: 6.62, y: 13.79))
        bezierPath.close()
        blue.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 17.01, y: 13))
        bezier2Path.addLine(to: CGPoint(x: 17, y: 11))
        bezier2Path.addLine(to: CGPoint(x: 12, y: 11))
        bezier2Path.addLine(to: CGPoint(x: 12, y: 7))
        bezier2Path.addLine(to: CGPoint(x: 17.01, y: 7))
        bezier2Path.addLine(to: CGPoint(x: 17.01, y: 5))
        bezier2Path.addLine(to: CGPoint(x: 21, y: 9))
        bezier2Path.addLine(to: CGPoint(x: 17.01, y: 13))
        bezier2Path.close()
        blue.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawArrowDown(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Arrow Drawing
        context.saveGState()
        context.translateBy(x: 11.7, y: 13)
        context.rotate(by: -90 * CGFloat.pi/180)

        let arrowPath = UIBezierPath()
        arrowPath.move(to: CGPoint(x: 3.7, y: 4.6))
        arrowPath.addLine(to: CGPoint(x: -0.9, y: 0))
        arrowPath.addLine(to: CGPoint(x: 3.7, y: -4.6))
        arrowPath.addLine(to: CGPoint(x: 2.3, y: -6))
        arrowPath.addLine(to: CGPoint(x: -3.7, y: 0))
        arrowPath.addLine(to: CGPoint(x: 2.3, y: 6))
        arrowPath.addLine(to: CGPoint(x: 3.7, y: 4.6))
        arrowPath.close()
        black.setFill()
        arrowPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSort(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 3, y: 18))
        bezierPath.addLine(to: CGPoint(x: 9, y: 18))
        bezierPath.addLine(to: CGPoint(x: 9, y: 16))
        bezierPath.addLine(to: CGPoint(x: 3, y: 16))
        bezierPath.addLine(to: CGPoint(x: 3, y: 18))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 3, y: 6))
        bezierPath.addLine(to: CGPoint(x: 3, y: 8))
        bezierPath.addLine(to: CGPoint(x: 21, y: 8))
        bezierPath.addLine(to: CGPoint(x: 21, y: 6))
        bezierPath.addLine(to: CGPoint(x: 3, y: 6))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 3, y: 13))
        bezierPath.addLine(to: CGPoint(x: 15, y: 13))
        bezierPath.addLine(to: CGPoint(x: 15, y: 11))
        bezierPath.addLine(to: CGPoint(x: 3, y: 11))
        bezierPath.addLine(to: CGPoint(x: 3, y: 13))
        bezierPath.close()
        black.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawLogout(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit, customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.09, y: 15.59))
        bezierPath.addLine(to: CGPoint(x: 11.5, y: 17))
        bezierPath.addLine(to: CGPoint(x: 16.5, y: 12))
        bezierPath.addLine(to: CGPoint(x: 11.5, y: 7))
        bezierPath.addLine(to: CGPoint(x: 10.09, y: 8.41))
        bezierPath.addLine(to: CGPoint(x: 12.67, y: 11))
        bezierPath.addLine(to: CGPoint(x: 3, y: 11))
        bezierPath.addLine(to: CGPoint(x: 3, y: 13))
        bezierPath.addLine(to: CGPoint(x: 12.67, y: 13))
        bezierPath.addLine(to: CGPoint(x: 10.09, y: 15.59))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 19, y: 3))
        bezierPath.addLine(to: CGPoint(x: 5, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 5), controlPoint1: CGPoint(x: 3.89, y: 3), controlPoint2: CGPoint(x: 3, y: 3.9))
        bezierPath.addLine(to: CGPoint(x: 3, y: 9))
        bezierPath.addLine(to: CGPoint(x: 5, y: 9))
        bezierPath.addLine(to: CGPoint(x: 5, y: 5))
        bezierPath.addLine(to: CGPoint(x: 19, y: 5))
        bezierPath.addLine(to: CGPoint(x: 19, y: 19))
        bezierPath.addLine(to: CGPoint(x: 5, y: 19))
        bezierPath.addLine(to: CGPoint(x: 5, y: 15))
        bezierPath.addLine(to: CGPoint(x: 3, y: 15))
        bezierPath.addLine(to: CGPoint(x: 3, y: 19))
        bezierPath.addCurve(to: CGPoint(x: 5, y: 21), controlPoint1: CGPoint(x: 3, y: 20.1), controlPoint2: CGPoint(x: 3.89, y: 21))
        bezierPath.addLine(to: CGPoint(x: 19, y: 21))
        bezierPath.addCurve(to: CGPoint(x: 21, y: 19), controlPoint1: CGPoint(x: 20.1, y: 21), controlPoint2: CGPoint(x: 21, y: 20.1))
        bezierPath.addLine(to: CGPoint(x: 21, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 19, y: 3), controlPoint1: CGPoint(x: 21, y: 3.9), controlPoint2: CGPoint(x: 20.1, y: 3))
        bezierPath.close()
        customColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawNoAavatar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit, customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 30, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 30), controlPoint1: CGPoint(x: 14.54, y: 2), controlPoint2: CGPoint(x: 2, y: 14.54))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 58), controlPoint1: CGPoint(x: 2, y: 45.46), controlPoint2: CGPoint(x: 14.54, y: 58))
        bezierPath.addCurve(to: CGPoint(x: 58, y: 30), controlPoint1: CGPoint(x: 45.46, y: 58), controlPoint2: CGPoint(x: 58, y: 45.46))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 2), controlPoint1: CGPoint(x: 58, y: 14.54), controlPoint2: CGPoint(x: 45.46, y: 2))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 30, y: 10.4))
        bezierPath.addCurve(to: CGPoint(x: 38.4, y: 18.8), controlPoint1: CGPoint(x: 34.65, y: 10.4), controlPoint2: CGPoint(x: 38.4, y: 14.15))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 27.2), controlPoint1: CGPoint(x: 38.4, y: 23.45), controlPoint2: CGPoint(x: 34.65, y: 27.2))
        bezierPath.addCurve(to: CGPoint(x: 21.6, y: 18.8), controlPoint1: CGPoint(x: 25.35, y: 27.2), controlPoint2: CGPoint(x: 21.6, y: 23.45))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 10.4), controlPoint1: CGPoint(x: 21.6, y: 14.15), controlPoint2: CGPoint(x: 25.35, y: 10.4))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 30, y: 50.16))
        bezierPath.addCurve(to: CGPoint(x: 13.2, y: 41.14), controlPoint1: CGPoint(x: 23, y: 50.16), controlPoint2: CGPoint(x: 16.81, y: 46.58))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 32.52), controlPoint1: CGPoint(x: 13.28, y: 35.57), controlPoint2: CGPoint(x: 24.4, y: 32.52))
        bezierPath.addCurve(to: CGPoint(x: 46.8, y: 41.14), controlPoint1: CGPoint(x: 35.57, y: 32.52), controlPoint2: CGPoint(x: 46.72, y: 35.57))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 50.16), controlPoint1: CGPoint(x: 43.19, y: 46.58), controlPoint2: CGPoint(x: 37, y: 50.16))
        bezierPath.close()
        customColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawFilterOff(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Color Declarations
        let blue = UIColor(red: 0.000, green: 0.478, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 14.29, y: 12.7))
        bezierPath.addLine(to: CGPoint(x: 21, y: 5.36))
        bezierPath.addLine(to: CGPoint(x: 21, y: 4))
        bezierPath.addLine(to: CGPoint(x: 3, y: 4))
        bezierPath.addLine(to: CGPoint(x: 3, y: 5.5))
        bezierPath.addLine(to: CGPoint(x: 9.71, y: 12.7))
        bezierPath.addLine(to: CGPoint(x: 9.71, y: 19))
        bezierPath.addLine(to: CGPoint(x: 14.29, y: 22))
        bezierPath.addLine(to: CGPoint(x: 14.29, y: 12.7))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        blue.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawFilterOn(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Color Declarations
        let blue = UIColor(red: 0.000, green: 0.478, blue: 1.000, alpha: 1.000)

        //// Oval Drawing
        context.saveGState()
        context.translateBy(x: 19, y: 5)

        let ovalPath = UIBezierPath(ovalIn: CGRect(x: -3, y: -3, width: 6, height: 6))
        blue.setFill()
        ovalPath.fill()

        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 14, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 17.1, y: 9.63), controlPoint1: CGPoint(x: 14, y: 7.09), controlPoint2: CGPoint(x: 15.28, y: 8.88))
        bezierPath.addCurve(to: CGPoint(x: 14.29, y: 12.7), controlPoint1: CGPoint(x: 15.62, y: 11.24), controlPoint2: CGPoint(x: 14.29, y: 12.7))
        bezierPath.addLine(to: CGPoint(x: 14.29, y: 22))
        bezierPath.addLine(to: CGPoint(x: 9.71, y: 19))
        bezierPath.addLine(to: CGPoint(x: 9.71, y: 12.7))
        bezierPath.addLine(to: CGPoint(x: 3, y: 5.5))
        bezierPath.addLine(to: CGPoint(x: 3, y: 4))
        bezierPath.addLine(to: CGPoint(x: 14.1, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 5), controlPoint1: CGPoint(x: 14.03, y: 4.32), controlPoint2: CGPoint(x: 14, y: 4.66))
        bezierPath.close()
        blue.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDisclosure(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 11, height: 16), resizing: ResizingBehavior = .aspectFit, customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 11, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 11, y: resizedFrame.height / 16)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 2, y: 12.59))
        bezierPath.addLine(to: CGPoint(x: 6.58, y: 8))
        bezierPath.addLine(to: CGPoint(x: 2, y: 3.41))
        bezierPath.addLine(to: CGPoint(x: 3.41, y: 2))
        bezierPath.addLine(to: CGPoint(x: 9.41, y: 8))
        bezierPath.addLine(to: CGPoint(x: 3.41, y: 14))
        bezierPath.addLine(to: CGPoint(x: 2, y: 12.59))
        bezierPath.close()
        customColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPhone(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Color Declarations
        let blue = UIColor(red: 0.000, green: 0.478, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6.62, y: 10.79))
        bezierPath.addCurve(to: CGPoint(x: 13.21, y: 17.38), controlPoint1: CGPoint(x: 8.06, y: 13.62), controlPoint2: CGPoint(x: 10.38, y: 15.93))
        bezierPath.addLine(to: CGPoint(x: 15.41, y: 15.18))
        bezierPath.addCurve(to: CGPoint(x: 16.43, y: 14.94), controlPoint1: CGPoint(x: 15.68, y: 14.91), controlPoint2: CGPoint(x: 16.08, y: 14.82))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 15.51), controlPoint1: CGPoint(x: 17.55, y: 15.31), controlPoint2: CGPoint(x: 18.76, y: 15.51))
        bezierPath.addCurve(to: CGPoint(x: 21, y: 16.51), controlPoint1: CGPoint(x: 20.55, y: 15.51), controlPoint2: CGPoint(x: 21, y: 15.96))
        bezierPath.addLine(to: CGPoint(x: 21, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 21), controlPoint1: CGPoint(x: 21, y: 20.55), controlPoint2: CGPoint(x: 20.55, y: 21))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 4), controlPoint1: CGPoint(x: 10.61, y: 21), controlPoint2: CGPoint(x: 3, y: 13.39))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 3), controlPoint1: CGPoint(x: 3, y: 3.45), controlPoint2: CGPoint(x: 3.45, y: 3))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 8.5, y: 4), controlPoint1: CGPoint(x: 8.05, y: 3), controlPoint2: CGPoint(x: 8.5, y: 3.45))
        bezierPath.addCurve(to: CGPoint(x: 9.07, y: 7.57), controlPoint1: CGPoint(x: 8.5, y: 5.25), controlPoint2: CGPoint(x: 8.7, y: 6.45))
        bezierPath.addCurve(to: CGPoint(x: 8.82, y: 8.59), controlPoint1: CGPoint(x: 9.18, y: 7.92), controlPoint2: CGPoint(x: 9.1, y: 8.31))
        bezierPath.addLine(to: CGPoint(x: 6.62, y: 10.79))
        bezierPath.close()
        blue.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Color Declarations
        let blue = UIColor(red: 0.000, green: 0.478, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 20, y: 4))
        bezierPath.addLine(to: CGPoint(x: 4, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 2.01, y: 6), controlPoint1: CGPoint(x: 2.9, y: 4), controlPoint2: CGPoint(x: 2.01, y: 4.9))
        bezierPath.addLine(to: CGPoint(x: 2, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 20), controlPoint1: CGPoint(x: 2, y: 19.1), controlPoint2: CGPoint(x: 2.9, y: 20))
        bezierPath.addLine(to: CGPoint(x: 20, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 18), controlPoint1: CGPoint(x: 21.1, y: 20), controlPoint2: CGPoint(x: 22, y: 19.1))
        bezierPath.addLine(to: CGPoint(x: 22, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 4), controlPoint1: CGPoint(x: 22, y: 4.9), controlPoint2: CGPoint(x: 21.1, y: 4))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 20, y: 18))
        bezierPath.addLine(to: CGPoint(x: 4, y: 18))
        bezierPath.addLine(to: CGPoint(x: 4, y: 8))
        bezierPath.addLine(to: CGPoint(x: 12, y: 13))
        bezierPath.addLine(to: CGPoint(x: 20, y: 8))
        bezierPath.addLine(to: CGPoint(x: 20, y: 18))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 12, y: 11))
        bezierPath.addLine(to: CGPoint(x: 4, y: 6))
        bezierPath.addLine(to: CGPoint(x: 20, y: 6))
        bezierPath.addLine(to: CGPoint(x: 12, y: 11))
        bezierPath.close()
        blue.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCalendar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Color Declarations
        let blue = UIColor(red: 0.000, green: 0.478, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 19, y: 3))
        bezierPath.addLine(to: CGPoint(x: 18, y: 3))
        bezierPath.addLine(to: CGPoint(x: 18, y: 1))
        bezierPath.addLine(to: CGPoint(x: 16, y: 1))
        bezierPath.addLine(to: CGPoint(x: 16, y: 3))
        bezierPath.addLine(to: CGPoint(x: 8, y: 3))
        bezierPath.addLine(to: CGPoint(x: 8, y: 1))
        bezierPath.addLine(to: CGPoint(x: 6, y: 1))
        bezierPath.addLine(to: CGPoint(x: 6, y: 3))
        bezierPath.addLine(to: CGPoint(x: 5, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 3.01, y: 5), controlPoint1: CGPoint(x: 3.89, y: 3), controlPoint2: CGPoint(x: 3.01, y: 3.9))
        bezierPath.addLine(to: CGPoint(x: 3, y: 19))
        bezierPath.addCurve(to: CGPoint(x: 5, y: 21), controlPoint1: CGPoint(x: 3, y: 20.1), controlPoint2: CGPoint(x: 3.89, y: 21))
        bezierPath.addLine(to: CGPoint(x: 19, y: 21))
        bezierPath.addCurve(to: CGPoint(x: 21, y: 19), controlPoint1: CGPoint(x: 20.1, y: 21), controlPoint2: CGPoint(x: 21, y: 20.1))
        bezierPath.addLine(to: CGPoint(x: 21, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 19, y: 3), controlPoint1: CGPoint(x: 21, y: 3.9), controlPoint2: CGPoint(x: 20.1, y: 3))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 19, y: 19))
        bezierPath.addLine(to: CGPoint(x: 5, y: 19))
        bezierPath.addLine(to: CGPoint(x: 5, y: 8))
        bezierPath.addLine(to: CGPoint(x: 19, y: 8))
        bezierPath.addLine(to: CGPoint(x: 19, y: 19))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 7, y: 10))
        bezierPath.addLine(to: CGPoint(x: 12, y: 10))
        bezierPath.addLine(to: CGPoint(x: 12, y: 15))
        bezierPath.addLine(to: CGPoint(x: 7, y: 15))
        bezierPath.addLine(to: CGPoint(x: 7, y: 10))
        bezierPath.close()
        blue.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDone(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Rectangle Drawing


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 9, y: 16.2))
        bezierPath.addLine(to: CGPoint(x: 4.8, y: 12))
        bezierPath.addLine(to: CGPoint(x: 3.4, y: 13.4))
        bezierPath.addLine(to: CGPoint(x: 9, y: 19))
        bezierPath.addLine(to: CGPoint(x: 21, y: 7))
        bezierPath.addLine(to: CGPoint(x: 19.6, y: 5.6))
        bezierPath.addLine(to: CGPoint(x: 9, y: 16.2))
        bezierPath.close()
        white.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSend(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit, customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 2.01, y: 21))
        bezierPath.addLine(to: CGPoint(x: 23, y: 12))
        bezierPath.addLine(to: CGPoint(x: 2.01, y: 3))
        bezierPath.addLine(to: CGPoint(x: 2, y: 10))
        bezierPath.addLine(to: CGPoint(x: 17, y: 12))
        bezierPath.addLine(to: CGPoint(x: 2, y: 14))
        bezierPath.addLine(to: CGPoint(x: 2.01, y: 21))
        bezierPath.close()
        customColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawRestore(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit, customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 13, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 12), controlPoint1: CGPoint(x: 8.03, y: 3), controlPoint2: CGPoint(x: 4, y: 7.03))
        bezierPath.addLine(to: CGPoint(x: 1, y: 12))
        bezierPath.addLine(to: CGPoint(x: 4.89, y: 15.89))
        bezierPath.addLine(to: CGPoint(x: 4.96, y: 16.03))
        bezierPath.addLine(to: CGPoint(x: 9, y: 12))
        bezierPath.addLine(to: CGPoint(x: 6, y: 12))
        bezierPath.addCurve(to: CGPoint(x: 13, y: 5), controlPoint1: CGPoint(x: 6, y: 8.13), controlPoint2: CGPoint(x: 9.13, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 12), controlPoint1: CGPoint(x: 16.87, y: 5), controlPoint2: CGPoint(x: 20, y: 8.13))
        bezierPath.addCurve(to: CGPoint(x: 13, y: 19), controlPoint1: CGPoint(x: 20, y: 15.87), controlPoint2: CGPoint(x: 16.87, y: 19))
        bezierPath.addCurve(to: CGPoint(x: 8.06, y: 16.94), controlPoint1: CGPoint(x: 11.07, y: 19), controlPoint2: CGPoint(x: 9.32, y: 18.21))
        bezierPath.addLine(to: CGPoint(x: 6.64, y: 18.36))
        bezierPath.addCurve(to: CGPoint(x: 13, y: 21), controlPoint1: CGPoint(x: 8.27, y: 19.99), controlPoint2: CGPoint(x: 10.51, y: 21))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 12), controlPoint1: CGPoint(x: 17.97, y: 21), controlPoint2: CGPoint(x: 22, y: 16.97))
        bezierPath.addCurve(to: CGPoint(x: 13, y: 3), controlPoint1: CGPoint(x: 22, y: 7.03), controlPoint2: CGPoint(x: 17.97, y: 3))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 12, y: 8))
        bezierPath.addLine(to: CGPoint(x: 12, y: 13))
        bezierPath.addLine(to: CGPoint(x: 16.28, y: 15.54))
        bezierPath.addLine(to: CGPoint(x: 17, y: 14.33))
        bezierPath.addLine(to: CGPoint(x: 13.5, y: 12.25))
        bezierPath.addLine(to: CGPoint(x: 13.5, y: 8))
        bezierPath.addLine(to: CGPoint(x: 12, y: 8))
        bezierPath.close()
        customColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawQuery(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Color Declarations
        let blue = UIColor(red: 0.000, green: 0.478, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 11.99, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 12), controlPoint1: CGPoint(x: 6.47, y: 2), controlPoint2: CGPoint(x: 2, y: 6.48))
        bezierPath.addCurve(to: CGPoint(x: 11.99, y: 22), controlPoint1: CGPoint(x: 2, y: 17.52), controlPoint2: CGPoint(x: 6.47, y: 22))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 12), controlPoint1: CGPoint(x: 17.52, y: 22), controlPoint2: CGPoint(x: 22, y: 17.52))
        bezierPath.addCurve(to: CGPoint(x: 11.99, y: 2), controlPoint1: CGPoint(x: 22, y: 6.48), controlPoint2: CGPoint(x: 17.52, y: 2))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 12, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 12), controlPoint1: CGPoint(x: 7.58, y: 20), controlPoint2: CGPoint(x: 4, y: 16.42))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 4), controlPoint1: CGPoint(x: 4, y: 7.58), controlPoint2: CGPoint(x: 7.58, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 12), controlPoint1: CGPoint(x: 16.42, y: 4), controlPoint2: CGPoint(x: 20, y: 7.58))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 20), controlPoint1: CGPoint(x: 20, y: 16.42), controlPoint2: CGPoint(x: 16.42, y: 20))
        bezierPath.close()
        blue.setFill()
        bezierPath.fill()


        //// Rectangle Drawing


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 12.5, y: 7))
        bezier2Path.addLine(to: CGPoint(x: 11, y: 7))
        bezier2Path.addLine(to: CGPoint(x: 11, y: 13))
        bezier2Path.addLine(to: CGPoint(x: 16.25, y: 16.15))
        bezier2Path.addLine(to: CGPoint(x: 17, y: 14.92))
        bezier2Path.addLine(to: CGPoint(x: 12.5, y: 12.25))
        bezier2Path.addLine(to: CGPoint(x: 12.5, y: 7))
        bezier2Path.close()
        blue.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDelete(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit, customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6, y: 19))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 21), controlPoint1: CGPoint(x: 6, y: 20.1), controlPoint2: CGPoint(x: 6.9, y: 21))
        bezierPath.addLine(to: CGPoint(x: 16, y: 21))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 19), controlPoint1: CGPoint(x: 17.1, y: 21), controlPoint2: CGPoint(x: 18, y: 20.1))
        bezierPath.addLine(to: CGPoint(x: 18, y: 7))
        bezierPath.addLine(to: CGPoint(x: 6, y: 7))
        bezierPath.addLine(to: CGPoint(x: 6, y: 19))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 19, y: 4))
        bezierPath.addLine(to: CGPoint(x: 15.5, y: 4))
        bezierPath.addLine(to: CGPoint(x: 14.5, y: 3))
        bezierPath.addLine(to: CGPoint(x: 9.5, y: 3))
        bezierPath.addLine(to: CGPoint(x: 8.5, y: 4))
        bezierPath.addLine(to: CGPoint(x: 5, y: 4))
        bezierPath.addLine(to: CGPoint(x: 5, y: 6))
        bezierPath.addLine(to: CGPoint(x: 19, y: 6))
        bezierPath.addLine(to: CGPoint(x: 19, y: 4))
        bezierPath.close()
        customColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSearch(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit, customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 15.5, y: 14))
        bezierPath.addLine(to: CGPoint(x: 14.71, y: 14))
        bezierPath.addLine(to: CGPoint(x: 14.43, y: 13.73))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 9.5), controlPoint1: CGPoint(x: 15.41, y: 12.59), controlPoint2: CGPoint(x: 16, y: 11.11))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 3), controlPoint1: CGPoint(x: 16, y: 5.91), controlPoint2: CGPoint(x: 13.09, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 9.5), controlPoint1: CGPoint(x: 5.91, y: 3), controlPoint2: CGPoint(x: 3, y: 5.91))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 16), controlPoint1: CGPoint(x: 3, y: 13.09), controlPoint2: CGPoint(x: 5.91, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 13.73, y: 14.43), controlPoint1: CGPoint(x: 11.11, y: 16), controlPoint2: CGPoint(x: 12.59, y: 15.41))
        bezierPath.addLine(to: CGPoint(x: 14, y: 14.71))
        bezierPath.addLine(to: CGPoint(x: 14, y: 15.5))
        bezierPath.addLine(to: CGPoint(x: 19, y: 20.49))
        bezierPath.addLine(to: CGPoint(x: 20.49, y: 19))
        bezierPath.addLine(to: CGPoint(x: 15.5, y: 14))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9.5, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 5, y: 9.5), controlPoint1: CGPoint(x: 7.01, y: 14), controlPoint2: CGPoint(x: 5, y: 11.99))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 5), controlPoint1: CGPoint(x: 5, y: 7.01), controlPoint2: CGPoint(x: 7.01, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 9.5), controlPoint1: CGPoint(x: 11.99, y: 5), controlPoint2: CGPoint(x: 14, y: 7.01))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 14), controlPoint1: CGPoint(x: 14, y: 11.99), controlPoint2: CGPoint(x: 11.99, y: 14))
        bezierPath.close()
        customColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawGlobe(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit, customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 12, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 12), controlPoint1: CGPoint(x: 6.48, y: 2), controlPoint2: CGPoint(x: 2, y: 6.48))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 22), controlPoint1: CGPoint(x: 2, y: 17.52), controlPoint2: CGPoint(x: 6.48, y: 22))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 12), controlPoint1: CGPoint(x: 17.52, y: 22), controlPoint2: CGPoint(x: 22, y: 17.52))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 2), controlPoint1: CGPoint(x: 22, y: 6.48), controlPoint2: CGPoint(x: 17.52, y: 2))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 11, y: 19.93))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 12), controlPoint1: CGPoint(x: 7.05, y: 19.44), controlPoint2: CGPoint(x: 4, y: 16.08))
        bezierPath.addCurve(to: CGPoint(x: 4.21, y: 10.21), controlPoint1: CGPoint(x: 4, y: 11.38), controlPoint2: CGPoint(x: 4.08, y: 10.79))
        bezierPath.addLine(to: CGPoint(x: 9, y: 15))
        bezierPath.addLine(to: CGPoint(x: 9, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 18), controlPoint1: CGPoint(x: 9, y: 17.1), controlPoint2: CGPoint(x: 9.9, y: 18))
        bezierPath.addLine(to: CGPoint(x: 11, y: 19.93))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 17.9, y: 17.39))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 16), controlPoint1: CGPoint(x: 17.64, y: 16.58), controlPoint2: CGPoint(x: 16.9, y: 16))
        bezierPath.addLine(to: CGPoint(x: 15, y: 16))
        bezierPath.addLine(to: CGPoint(x: 15, y: 13))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 12), controlPoint1: CGPoint(x: 15, y: 12.45), controlPoint2: CGPoint(x: 14.55, y: 12))
        bezierPath.addLine(to: CGPoint(x: 8, y: 12))
        bezierPath.addLine(to: CGPoint(x: 8, y: 10))
        bezierPath.addLine(to: CGPoint(x: 10, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 9), controlPoint1: CGPoint(x: 10.55, y: 10), controlPoint2: CGPoint(x: 11, y: 9.55))
        bezierPath.addLine(to: CGPoint(x: 11, y: 7))
        bezierPath.addLine(to: CGPoint(x: 13, y: 7))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 5), controlPoint1: CGPoint(x: 14.1, y: 7), controlPoint2: CGPoint(x: 15, y: 6.1))
        bezierPath.addLine(to: CGPoint(x: 15, y: 4.59))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 12), controlPoint1: CGPoint(x: 17.93, y: 5.78), controlPoint2: CGPoint(x: 20, y: 8.65))
        bezierPath.addCurve(to: CGPoint(x: 17.9, y: 17.39), controlPoint1: CGPoint(x: 20, y: 14.08), controlPoint2: CGPoint(x: 19.2, y: 15.97))
        bezierPath.close()
        customColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHub(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit, customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 17, y: 16))
        bezierPath.addLine(to: CGPoint(x: 13, y: 12))
        bezierPath.addLine(to: CGPoint(x: 13, y: 8.82))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 6), controlPoint1: CGPoint(x: 14.16, y: 8.4), controlPoint2: CGPoint(x: 15, y: 7.3))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 3), controlPoint1: CGPoint(x: 15, y: 4.34), controlPoint2: CGPoint(x: 13.66, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 6), controlPoint1: CGPoint(x: 10.34, y: 3), controlPoint2: CGPoint(x: 9, y: 4.34))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 8.82), controlPoint1: CGPoint(x: 9, y: 7.3), controlPoint2: CGPoint(x: 9.84, y: 8.4))
        bezierPath.addLine(to: CGPoint(x: 11, y: 12))
        bezierPath.addLine(to: CGPoint(x: 7, y: 16))
        bezierPath.addLine(to: CGPoint(x: 3, y: 16))
        bezierPath.addLine(to: CGPoint(x: 3, y: 21))
        bezierPath.addLine(to: CGPoint(x: 8, y: 21))
        bezierPath.addLine(to: CGPoint(x: 8, y: 17.95))
        bezierPath.addLine(to: CGPoint(x: 12, y: 13.75))
        bezierPath.addLine(to: CGPoint(x: 16, y: 17.95))
        bezierPath.addLine(to: CGPoint(x: 16, y: 21))
        bezierPath.addLine(to: CGPoint(x: 21, y: 21))
        bezierPath.addLine(to: CGPoint(x: 21, y: 16))
        bezierPath.addLine(to: CGPoint(x: 17, y: 16))
        bezierPath.close()
        customColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPhotoAdd(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit, customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6, y: 8))
        bezierPath.addLine(to: CGPoint(x: 6, y: 2))
        bezierPath.addLine(to: CGPoint(x: 10, y: 2))
        bezierPath.addLine(to: CGPoint(x: 10, y: 8))
        bezierPath.addLine(to: CGPoint(x: 16, y: 8))
        bezierPath.addLine(to: CGPoint(x: 16, y: 12))
        bezierPath.addLine(to: CGPoint(x: 10, y: 12))
        bezierPath.addLine(to: CGPoint(x: 10, y: 18))
        bezierPath.addLine(to: CGPoint(x: 6, y: 18))
        bezierPath.addLine(to: CGPoint(x: 6, y: 12))
        bezierPath.addLine(to: CGPoint(x: 0, y: 12))
        bezierPath.addLine(to: CGPoint(x: 0, y: 8))
        bezierPath.addLine(to: CGPoint(x: 6, y: 8))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 12, y: 20))
        bezierPath.addLine(to: CGPoint(x: 12, y: 14))
        bezierPath.addLine(to: CGPoint(x: 18, y: 14))
        bezierPath.addLine(to: CGPoint(x: 18, y: 8))
        bezierPath.addLine(to: CGPoint(x: 32, y: 8))
        bezierPath.addLine(to: CGPoint(x: 35.66, y: 12))
        bezierPath.addLine(to: CGPoint(x: 42, y: 12))
        bezierPath.addCurve(to: CGPoint(x: 46, y: 16), controlPoint1: CGPoint(x: 44.2, y: 12), controlPoint2: CGPoint(x: 46, y: 13.8))
        bezierPath.addLine(to: CGPoint(x: 46, y: 40))
        bezierPath.addCurve(to: CGPoint(x: 42, y: 44), controlPoint1: CGPoint(x: 46, y: 42.2), controlPoint2: CGPoint(x: 44.2, y: 44))
        bezierPath.addLine(to: CGPoint(x: 10, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 40), controlPoint1: CGPoint(x: 7.8, y: 44), controlPoint2: CGPoint(x: 6, y: 42.2))
        bezierPath.addLine(to: CGPoint(x: 6, y: 20))
        bezierPath.addLine(to: CGPoint(x: 12, y: 20))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 26, y: 38))
        bezierPath.addCurve(to: CGPoint(x: 36, y: 28), controlPoint1: CGPoint(x: 31.52, y: 38), controlPoint2: CGPoint(x: 36, y: 33.52))
        bezierPath.addCurve(to: CGPoint(x: 26, y: 18), controlPoint1: CGPoint(x: 36, y: 22.48), controlPoint2: CGPoint(x: 31.52, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 28), controlPoint1: CGPoint(x: 20.48, y: 18), controlPoint2: CGPoint(x: 16, y: 22.48))
        bezierPath.addCurve(to: CGPoint(x: 26, y: 38), controlPoint1: CGPoint(x: 16, y: 33.52), controlPoint2: CGPoint(x: 20.48, y: 38))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 19.6, y: 28))
        bezierPath.addCurve(to: CGPoint(x: 26, y: 34.4), controlPoint1: CGPoint(x: 19.6, y: 31.54), controlPoint2: CGPoint(x: 22.46, y: 34.4))
        bezierPath.addCurve(to: CGPoint(x: 32.4, y: 28), controlPoint1: CGPoint(x: 29.54, y: 34.4), controlPoint2: CGPoint(x: 32.4, y: 31.54))
        bezierPath.addCurve(to: CGPoint(x: 26, y: 21.6), controlPoint1: CGPoint(x: 32.4, y: 24.46), controlPoint2: CGPoint(x: 29.54, y: 21.6))
        bezierPath.addCurve(to: CGPoint(x: 19.6, y: 28), controlPoint1: CGPoint(x: 22.46, y: 21.6), controlPoint2: CGPoint(x: 19.6, y: 24.46))
        bezierPath.close()
        customColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawTrophy(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)


        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let gold = UIColor(red: 0.934, green: 0.925, blue: 0.130, alpha: 1.000)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 1, y: 1, width: 26, height: 26))
        white.setFill()
        ovalPath.fill()


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 9.33, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 18.89), controlPoint1: CGPoint(x: 9.33, y: 13.44), controlPoint2: CGPoint(x: 11.43, y: 18.89))
        bezierPath.addCurve(to: CGPoint(x: 18.67, y: 8), controlPoint1: CGPoint(x: 16.57, y: 18.89), controlPoint2: CGPoint(x: 18.67, y: 13.52))
        bezierPath.addLine(to: CGPoint(x: 9.33, y: 8))
        bezierPath.close()
        gold.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 15.56, y: 19.12))
        bezier2Path.addCurve(to: CGPoint(x: 14, y: 19.67), controlPoint1: CGPoint(x: 15.09, y: 19.43), controlPoint2: CGPoint(x: 14.54, y: 19.67))
        bezier2Path.addCurve(to: CGPoint(x: 12.44, y: 19.12), controlPoint1: CGPoint(x: 13.46, y: 19.67), controlPoint2: CGPoint(x: 12.91, y: 19.43))
        bezier2Path.addCurve(to: CGPoint(x: 10.11, y: 22), controlPoint1: CGPoint(x: 12.76, y: 20.6), controlPoint2: CGPoint(x: 10.11, y: 20.37))
        bezier2Path.addLine(to: CGPoint(x: 17.89, y: 22))
        bezier2Path.addCurve(to: CGPoint(x: 15.56, y: 19.12), controlPoint1: CGPoint(x: 17.89, y: 20.37), controlPoint2: CGPoint(x: 15.24, y: 20.6))
        bezier2Path.close()
        gold.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 17.89, y: 8.78))
        bezier3Path.addLine(to: CGPoint(x: 21, y: 8.78))
        bezier3Path.addCurve(to: CGPoint(x: 17.89, y: 14.22), controlPoint1: CGPoint(x: 21, y: 13.52), controlPoint2: CGPoint(x: 18.28, y: 11.19))
        gold.setStroke()
        bezier3Path.lineWidth = 2
        bezier3Path.lineCapStyle = .round
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 10.11, y: 8.78))
        bezier4Path.addLine(to: CGPoint(x: 7, y: 8.78))
        bezier4Path.addCurve(to: CGPoint(x: 10.11, y: 14.22), controlPoint1: CGPoint(x: 7, y: 13.52), controlPoint2: CGPoint(x: 9.72, y: 11.19))
        gold.setStroke()
        bezier4Path.lineWidth = 2
        bezier4Path.lineCapStyle = .round
        bezier4Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawTravelBag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit, customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 20, y: 6))
        bezierPath.addLine(to: CGPoint(x: 17, y: 6))
        bezierPath.addLine(to: CGPoint(x: 17, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 2), controlPoint1: CGPoint(x: 17, y: 2.89), controlPoint2: CGPoint(x: 16.11, y: 2))
        bezierPath.addLine(to: CGPoint(x: 9, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 7, y: 4), controlPoint1: CGPoint(x: 7.89, y: 2), controlPoint2: CGPoint(x: 7, y: 2.89))
        bezierPath.addLine(to: CGPoint(x: 7, y: 6))
        bezierPath.addLine(to: CGPoint(x: 4, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 8), controlPoint1: CGPoint(x: 2.89, y: 6), controlPoint2: CGPoint(x: 2, y: 6.89))
        bezierPath.addLine(to: CGPoint(x: 2, y: 19))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 21), controlPoint1: CGPoint(x: 2, y: 20.11), controlPoint2: CGPoint(x: 2.89, y: 21))
        bezierPath.addLine(to: CGPoint(x: 20, y: 21))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 19), controlPoint1: CGPoint(x: 21.11, y: 21), controlPoint2: CGPoint(x: 22, y: 20.11))
        bezierPath.addLine(to: CGPoint(x: 22, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 6), controlPoint1: CGPoint(x: 22, y: 6.89), controlPoint2: CGPoint(x: 21.11, y: 6))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9, y: 4))
        bezierPath.addLine(to: CGPoint(x: 15, y: 4))
        bezierPath.addLine(to: CGPoint(x: 15, y: 6))
        bezierPath.addLine(to: CGPoint(x: 9, y: 6))
        bezierPath.addLine(to: CGPoint(x: 9, y: 4))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 20, y: 19))
        bezierPath.addLine(to: CGPoint(x: 4, y: 19))
        bezierPath.addLine(to: CGPoint(x: 4, y: 17))
        bezierPath.addLine(to: CGPoint(x: 20, y: 17))
        bezierPath.addLine(to: CGPoint(x: 20, y: 19))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 20, y: 14))
        bezierPath.addLine(to: CGPoint(x: 4, y: 14))
        bezierPath.addLine(to: CGPoint(x: 4, y: 8))
        bezierPath.addLine(to: CGPoint(x: 7, y: 8))
        bezierPath.addLine(to: CGPoint(x: 7, y: 10))
        bezierPath.addLine(to: CGPoint(x: 9, y: 10))
        bezierPath.addLine(to: CGPoint(x: 9, y: 8))
        bezierPath.addLine(to: CGPoint(x: 15, y: 8))
        bezierPath.addLine(to: CGPoint(x: 15, y: 10))
        bezierPath.addLine(to: CGPoint(x: 17, y: 10))
        bezierPath.addLine(to: CGPoint(x: 17, y: 8))
        bezierPath.addLine(to: CGPoint(x: 20, y: 8))
        bezierPath.addLine(to: CGPoint(x: 20, y: 14))
        bezierPath.close()
        customColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSearchIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 19.38, y: 17.5))
        bezierPath.addLine(to: CGPoint(x: 18.39, y: 17.5))
        bezierPath.addLine(to: CGPoint(x: 18.04, y: 17.16))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 11.88), controlPoint1: CGPoint(x: 19.26, y: 15.74), controlPoint2: CGPoint(x: 20, y: 13.89))
        bezierPath.addCurve(to: CGPoint(x: 11.87, y: 3.75), controlPoint1: CGPoint(x: 20, y: 7.39), controlPoint2: CGPoint(x: 16.36, y: 3.75))
        bezierPath.addCurve(to: CGPoint(x: 3.75, y: 11.88), controlPoint1: CGPoint(x: 7.39, y: 3.75), controlPoint2: CGPoint(x: 3.75, y: 7.39))
        bezierPath.addCurve(to: CGPoint(x: 11.87, y: 20), controlPoint1: CGPoint(x: 3.75, y: 16.36), controlPoint2: CGPoint(x: 7.39, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 17.16, y: 18.04), controlPoint1: CGPoint(x: 13.89, y: 20), controlPoint2: CGPoint(x: 15.74, y: 19.26))
        bezierPath.addLine(to: CGPoint(x: 17.5, y: 18.39))
        bezierPath.addLine(to: CGPoint(x: 17.5, y: 19.38))
        bezierPath.addLine(to: CGPoint(x: 23.75, y: 25.61))
        bezierPath.addLine(to: CGPoint(x: 25.61, y: 23.75))
        bezierPath.addLine(to: CGPoint(x: 19.38, y: 17.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 11.87, y: 17.5))
        bezierPath.addCurve(to: CGPoint(x: 6.25, y: 11.88), controlPoint1: CGPoint(x: 8.76, y: 17.5), controlPoint2: CGPoint(x: 6.25, y: 14.99))
        bezierPath.addCurve(to: CGPoint(x: 11.87, y: 6.25), controlPoint1: CGPoint(x: 6.25, y: 8.76), controlPoint2: CGPoint(x: 8.76, y: 6.25))
        bezierPath.addCurve(to: CGPoint(x: 17.5, y: 11.88), controlPoint1: CGPoint(x: 14.99, y: 6.25), controlPoint2: CGPoint(x: 17.5, y: 8.76))
        bezierPath.addCurve(to: CGPoint(x: 11.87, y: 17.5), controlPoint1: CGPoint(x: 17.5, y: 14.99), controlPoint2: CGPoint(x: 14.99, y: 17.5))
        bezierPath.close()
        black.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawFavoritesIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 27.5, y: 11.55))
        bezierPath.addLine(to: CGPoint(x: 18.51, y: 10.78))
        bezierPath.addLine(to: CGPoint(x: 15, y: 2.5))
        bezierPath.addLine(to: CGPoint(x: 11.49, y: 10.79))
        bezierPath.addLine(to: CGPoint(x: 2.5, y: 11.55))
        bezierPath.addLine(to: CGPoint(x: 9.33, y: 17.46))
        bezierPath.addLine(to: CGPoint(x: 7.27, y: 26.25))
        bezierPath.addLine(to: CGPoint(x: 15, y: 21.59))
        bezierPath.addLine(to: CGPoint(x: 22.73, y: 26.25))
        bezierPath.addLine(to: CGPoint(x: 20.69, y: 17.46))
        bezierPath.addLine(to: CGPoint(x: 27.5, y: 11.55))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 15, y: 19.25))
        bezierPath.addLine(to: CGPoint(x: 10.3, y: 22.09))
        bezierPath.addLine(to: CGPoint(x: 11.55, y: 16.74))
        bezierPath.addLine(to: CGPoint(x: 7.4, y: 13.14))
        bezierPath.addLine(to: CGPoint(x: 12.88, y: 12.66))
        bezierPath.addLine(to: CGPoint(x: 15, y: 7.62))
        bezierPath.addLine(to: CGPoint(x: 17.14, y: 12.68))
        bezierPath.addLine(to: CGPoint(x: 22.61, y: 13.15))
        bezierPath.addLine(to: CGPoint(x: 18.46, y: 16.75))
        bezierPath.addLine(to: CGPoint(x: 19.71, y: 22.1))
        bezierPath.addLine(to: CGPoint(x: 15, y: 19.25))
        bezierPath.close()
        black.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawFeedbackIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 25, y: 5))
        bezierPath.addLine(to: CGPoint(x: 5, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 2.51, y: 7.5), controlPoint1: CGPoint(x: 3.62, y: 5), controlPoint2: CGPoint(x: 2.51, y: 6.12))
        bezierPath.addLine(to: CGPoint(x: 2.5, y: 22.5))
        bezierPath.addCurve(to: CGPoint(x: 5, y: 25), controlPoint1: CGPoint(x: 2.5, y: 23.88), controlPoint2: CGPoint(x: 3.62, y: 25))
        bezierPath.addLine(to: CGPoint(x: 25, y: 25))
        bezierPath.addCurve(to: CGPoint(x: 27.5, y: 22.5), controlPoint1: CGPoint(x: 26.38, y: 25), controlPoint2: CGPoint(x: 27.5, y: 23.88))
        bezierPath.addLine(to: CGPoint(x: 27.5, y: 7.5))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 5), controlPoint1: CGPoint(x: 27.5, y: 6.12), controlPoint2: CGPoint(x: 26.38, y: 5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 25, y: 22.5))
        bezierPath.addLine(to: CGPoint(x: 5, y: 22.5))
        bezierPath.addLine(to: CGPoint(x: 5, y: 10))
        bezierPath.addLine(to: CGPoint(x: 15, y: 16.25))
        bezierPath.addLine(to: CGPoint(x: 25, y: 10))
        bezierPath.addLine(to: CGPoint(x: 25, y: 22.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 15, y: 13.75))
        bezierPath.addLine(to: CGPoint(x: 5, y: 7.5))
        bezierPath.addLine(to: CGPoint(x: 25, y: 7.5))
        bezierPath.addLine(to: CGPoint(x: 15, y: 13.75))
        bezierPath.close()
        black.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawAutorizedPofileIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 15, y: 2.5))
        bezierPath.addCurve(to: CGPoint(x: 2.5, y: 15), controlPoint1: CGPoint(x: 8.1, y: 2.5), controlPoint2: CGPoint(x: 2.5, y: 8.1))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 27.5), controlPoint1: CGPoint(x: 2.5, y: 21.9), controlPoint2: CGPoint(x: 8.1, y: 27.5))
        bezierPath.addCurve(to: CGPoint(x: 27.5, y: 15), controlPoint1: CGPoint(x: 21.9, y: 27.5), controlPoint2: CGPoint(x: 27.5, y: 21.9))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 2.5), controlPoint1: CGPoint(x: 27.5, y: 8.1), controlPoint2: CGPoint(x: 21.9, y: 2.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 15, y: 6.25))
        bezierPath.addCurve(to: CGPoint(x: 18.75, y: 10), controlPoint1: CGPoint(x: 17.07, y: 6.25), controlPoint2: CGPoint(x: 18.75, y: 7.92))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 13.75), controlPoint1: CGPoint(x: 18.75, y: 12.07), controlPoint2: CGPoint(x: 17.07, y: 13.75))
        bezierPath.addCurve(to: CGPoint(x: 11.25, y: 10), controlPoint1: CGPoint(x: 12.93, y: 13.75), controlPoint2: CGPoint(x: 11.25, y: 12.07))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 6.25), controlPoint1: CGPoint(x: 11.25, y: 7.92), controlPoint2: CGPoint(x: 12.93, y: 6.25))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 15, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 7.5, y: 19.98), controlPoint1: CGPoint(x: 11.88, y: 24), controlPoint2: CGPoint(x: 9.11, y: 22.4))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 16.13), controlPoint1: CGPoint(x: 7.54, y: 17.49), controlPoint2: CGPoint(x: 12.5, y: 16.13))
        bezierPath.addCurve(to: CGPoint(x: 22.5, y: 19.98), controlPoint1: CGPoint(x: 17.49, y: 16.13), controlPoint2: CGPoint(x: 22.46, y: 17.49))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 24), controlPoint1: CGPoint(x: 20.89, y: 22.4), controlPoint2: CGPoint(x: 18.12, y: 24))
        bezierPath.close()
        black.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawUnautorizedPofileIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 18.75, y: 15))
        bezierPath.addCurve(to: CGPoint(x: 23.75, y: 10), controlPoint1: CGPoint(x: 21.51, y: 15), controlPoint2: CGPoint(x: 23.75, y: 12.76))
        bezierPath.addCurve(to: CGPoint(x: 18.75, y: 5), controlPoint1: CGPoint(x: 23.75, y: 7.24), controlPoint2: CGPoint(x: 21.51, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 13.75, y: 10), controlPoint1: CGPoint(x: 15.99, y: 5), controlPoint2: CGPoint(x: 13.75, y: 7.24))
        bezierPath.addCurve(to: CGPoint(x: 18.75, y: 15), controlPoint1: CGPoint(x: 13.75, y: 12.76), controlPoint2: CGPoint(x: 15.99, y: 15))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 7.5, y: 12.5))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 8.75))
        bezierPath.addLine(to: CGPoint(x: 5, y: 8.75))
        bezierPath.addLine(to: CGPoint(x: 5, y: 12.5))
        bezierPath.addLine(to: CGPoint(x: 1.25, y: 12.5))
        bezierPath.addLine(to: CGPoint(x: 1.25, y: 15))
        bezierPath.addLine(to: CGPoint(x: 5, y: 15))
        bezierPath.addLine(to: CGPoint(x: 5, y: 18.75))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 18.75))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 15))
        bezierPath.addLine(to: CGPoint(x: 11.25, y: 15))
        bezierPath.addLine(to: CGPoint(x: 11.25, y: 12.5))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 12.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 18.75, y: 17.5))
        bezierPath.addCurve(to: CGPoint(x: 8.75, y: 22.5), controlPoint1: CGPoint(x: 15.41, y: 17.5), controlPoint2: CGPoint(x: 8.75, y: 19.18))
        bezierPath.addLine(to: CGPoint(x: 8.75, y: 25))
        bezierPath.addLine(to: CGPoint(x: 28.75, y: 25))
        bezierPath.addLine(to: CGPoint(x: 28.75, y: 22.5))
        bezierPath.addCurve(to: CGPoint(x: 18.75, y: 17.5), controlPoint1: CGPoint(x: 28.75, y: 19.18), controlPoint2: CGPoint(x: 22.09, y: 17.5))
        bezierPath.close()
        black.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfCloseGray: UIImage {
        if Cache.imageOfCloseGray != nil {
            return Cache.imageOfCloseGray!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 25), false, 0)
            PulsStyleKit.drawCloseGray()

        Cache.imageOfCloseGray = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfCloseGray!
    }

    @objc dynamic public class var imageOfTfSuccessIcon: UIImage {
        if Cache.imageOfTfSuccessIcon != nil {
            return Cache.imageOfTfSuccessIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            PulsStyleKit.drawTfSuccessIcon()

        Cache.imageOfTfSuccessIcon = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfTfSuccessIcon!
    }

    @objc dynamic public class var imageOfArrowBack: UIImage {
        if Cache.imageOfArrowBack != nil {
            return Cache.imageOfArrowBack!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 26, height: 34), false, 0)
            PulsStyleKit.drawArrowBack()

        Cache.imageOfArrowBack = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfArrowBack!
    }

    @objc dynamic public class var imageOfPhotodevice: UIImage {
        if Cache.imageOfPhotodevice != nil {
            return Cache.imageOfPhotodevice!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
            PulsStyleKit.drawPhotodevice()

        Cache.imageOfPhotodevice = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfPhotodevice!
    }

    @objc dynamic public class var imageOfTfAlertIcon: UIImage {
        if Cache.imageOfTfAlertIcon != nil {
            return Cache.imageOfTfAlertIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            PulsStyleKit.drawTfAlertIcon()

        Cache.imageOfTfAlertIcon = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfTfAlertIcon!
    }

    @objc dynamic public class var imageOfTfAlertIconStar: UIImage {
        if Cache.imageOfTfAlertIconStar != nil {
            return Cache.imageOfTfAlertIconStar!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            PulsStyleKit.drawTfAlertIconStar()

        Cache.imageOfTfAlertIconStar = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfTfAlertIconStar!
    }

    @objc dynamic public class func imageOfCloseBtn(customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 21, height: 21), false, 0)
            PulsStyleKit.drawCloseBtn(customColor: customColor)

        let imageOfCloseBtn = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return imageOfCloseBtn
    }

    @objc dynamic public class var imageOfCloseWhite: UIImage {
        if Cache.imageOfCloseWhite != nil {
            return Cache.imageOfCloseWhite!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 25), false, 0)
            PulsStyleKit.drawCloseWhite()

        Cache.imageOfCloseWhite = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfCloseWhite!
    }

    @objc dynamic public class func imageOfClock(customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 30), false, 0)
            PulsStyleKit.drawClock(customColor: customColor)

        let imageOfClock = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfClock
    }

    @objc dynamic public class var imageOfAttach: UIImage {
        if Cache.imageOfAttach != nil {
            return Cache.imageOfAttach!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PulsStyleKit.drawAttach()

        Cache.imageOfAttach = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfAttach!
    }

    @objc dynamic public class var imageOfBell: UIImage {
        if Cache.imageOfBell != nil {
            return Cache.imageOfBell!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 30), false, 0)
            PulsStyleKit.drawBell()

        Cache.imageOfBell = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfBell!
    }

    @objc dynamic public class var imageOfCallback: UIImage {
        if Cache.imageOfCallback != nil {
            return Cache.imageOfCallback!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 30), false, 0)
            PulsStyleKit.drawCallback()

        Cache.imageOfCallback = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCallback!
    }

    @objc dynamic public class var imageOfArrowDown: UIImage {
        if Cache.imageOfArrowDown != nil {
            return Cache.imageOfArrowDown!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PulsStyleKit.drawArrowDown()

        Cache.imageOfArrowDown = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfArrowDown!
    }

    @objc dynamic public class var imageOfSort: UIImage {
        if Cache.imageOfSort != nil {
            return Cache.imageOfSort!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PulsStyleKit.drawSort()

        Cache.imageOfSort = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSort!
    }

    @objc dynamic public class func imageOfLogout(customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PulsStyleKit.drawLogout(customColor: customColor)

        let imageOfLogout = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfLogout
    }

    @objc dynamic public class func imageOfNoAavatar(customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
            PulsStyleKit.drawNoAavatar(customColor: customColor)

        let imageOfNoAavatar = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfNoAavatar
    }

    @objc dynamic public class var imageOfFilterOff: UIImage {
        if Cache.imageOfFilterOff != nil {
            return Cache.imageOfFilterOff!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PulsStyleKit.drawFilterOff()

        Cache.imageOfFilterOff = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfFilterOff!
    }

    @objc dynamic public class var imageOfFilterOn: UIImage {
        if Cache.imageOfFilterOn != nil {
            return Cache.imageOfFilterOn!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PulsStyleKit.drawFilterOn()

        Cache.imageOfFilterOn = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfFilterOn!
    }

    @objc dynamic public class func imageOfDisclosure(customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 11, height: 16), false, 0)
            PulsStyleKit.drawDisclosure(customColor: customColor)

        let imageOfDisclosure = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfDisclosure
    }

    @objc dynamic public class var imageOfPhone: UIImage {
        if Cache.imageOfPhone != nil {
            return Cache.imageOfPhone!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PulsStyleKit.drawPhone()

        Cache.imageOfPhone = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPhone!
    }

    @objc dynamic public class var imageOfMail: UIImage {
        if Cache.imageOfMail != nil {
            return Cache.imageOfMail!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PulsStyleKit.drawMail()

        Cache.imageOfMail = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfMail!
    }

    @objc dynamic public class var imageOfCalendar: UIImage {
        if Cache.imageOfCalendar != nil {
            return Cache.imageOfCalendar!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PulsStyleKit.drawCalendar()

        Cache.imageOfCalendar = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCalendar!
    }

    @objc dynamic public class var imageOfDone: UIImage {
        if Cache.imageOfDone != nil {
            return Cache.imageOfDone!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PulsStyleKit.drawDone()

        Cache.imageOfDone = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfDone!
    }

    @objc dynamic public class func imageOfSend(customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PulsStyleKit.drawSend(customColor: customColor)

        let imageOfSend = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfSend
    }

    @objc dynamic public class func imageOfRestore(customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PulsStyleKit.drawRestore(customColor: customColor)

        let imageOfRestore = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysOriginal)
        UIGraphicsEndImageContext()

        return imageOfRestore
    }

    @objc dynamic public class var imageOfQuery: UIImage {
        if Cache.imageOfQuery != nil {
            return Cache.imageOfQuery!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PulsStyleKit.drawQuery()

        Cache.imageOfQuery = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfQuery!
    }

    @objc dynamic public class func imageOfDelete(customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PulsStyleKit.drawDelete(customColor: customColor)

        let imageOfDelete = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfDelete
    }

    @objc dynamic public class func imageOfSearch(customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PulsStyleKit.drawSearch(customColor: customColor)

        let imageOfSearch = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfSearch
    }

    @objc dynamic public class func imageOfGlobe(customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PulsStyleKit.drawGlobe(customColor: customColor)

        let imageOfGlobe = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfGlobe
    }

    @objc dynamic public class func imageOfHub(customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PulsStyleKit.drawHub(customColor: customColor)

        let imageOfHub = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfHub
    }

    @objc dynamic public class func imageOfPhotoAdd(customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
            PulsStyleKit.drawPhotoAdd(customColor: customColor)

        let imageOfPhotoAdd = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfPhotoAdd
    }

    @objc dynamic public class var imageOfTrophy: UIImage {
        if Cache.imageOfTrophy != nil {
            return Cache.imageOfTrophy!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
            PulsStyleKit.drawTrophy()

        Cache.imageOfTrophy = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfTrophy!
    }

    @objc dynamic public class func imageOfTravelBag(customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PulsStyleKit.drawTravelBag(customColor: customColor)

        let imageOfTravelBag = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfTravelBag
    }

    @objc dynamic public class var imageOfSearchIcon: UIImage {
        if Cache.imageOfSearchIcon != nil {
            return Cache.imageOfSearchIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            PulsStyleKit.drawSearchIcon()

        Cache.imageOfSearchIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSearchIcon!
    }

    @objc dynamic public class var imageOfFavoritesIcon: UIImage {
        if Cache.imageOfFavoritesIcon != nil {
            return Cache.imageOfFavoritesIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            PulsStyleKit.drawFavoritesIcon()

        Cache.imageOfFavoritesIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfFavoritesIcon!
    }

    @objc dynamic public class var imageOfFeedbackIcon: UIImage {
        if Cache.imageOfFeedbackIcon != nil {
            return Cache.imageOfFeedbackIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            PulsStyleKit.drawFeedbackIcon()

        Cache.imageOfFeedbackIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfFeedbackIcon!
    }

    @objc dynamic public class var imageOfAutorizedPofileIcon: UIImage {
        if Cache.imageOfAutorizedPofileIcon != nil {
            return Cache.imageOfAutorizedPofileIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            PulsStyleKit.drawAutorizedPofileIcon()

        Cache.imageOfAutorizedPofileIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfAutorizedPofileIcon!
    }

    @objc dynamic public class var imageOfUnautorizedPofileIcon: UIImage {
        if Cache.imageOfUnautorizedPofileIcon != nil {
            return Cache.imageOfUnautorizedPofileIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            PulsStyleKit.drawUnautorizedPofileIcon()

        Cache.imageOfUnautorizedPofileIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfUnautorizedPofileIcon!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var closeGrayTargets: [AnyObject]! {
        get { return Cache.closeGrayTargets }
        set {
            Cache.closeGrayTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfCloseGray)
            }
        }
    }

    @objc @IBOutlet dynamic var tfSuccessIconTargets: [AnyObject]! {
        get { return Cache.tfSuccessIconTargets }
        set {
            Cache.tfSuccessIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfTfSuccessIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var arrowBackTargets: [AnyObject]! {
        get { return Cache.arrowBackTargets }
        set {
            Cache.arrowBackTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfArrowBack)
            }
        }
    }

    @objc @IBOutlet dynamic var photodeviceTargets: [AnyObject]! {
        get { return Cache.photodeviceTargets }
        set {
            Cache.photodeviceTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfPhotodevice)
            }
        }
    }

    @objc @IBOutlet dynamic var tfAlertIconTargets: [AnyObject]! {
        get { return Cache.tfAlertIconTargets }
        set {
            Cache.tfAlertIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfTfAlertIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var tfAlertIconStarTargets: [AnyObject]! {
        get { return Cache.tfAlertIconStarTargets }
        set {
            Cache.tfAlertIconStarTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfTfAlertIconStar)
            }
        }
    }

    @objc @IBOutlet dynamic var closeWhiteTargets: [AnyObject]! {
        get { return Cache.closeWhiteTargets }
        set {
            Cache.closeWhiteTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfCloseWhite)
            }
        }
    }

    @objc @IBOutlet dynamic var attachTargets: [AnyObject]! {
        get { return Cache.attachTargets }
        set {
            Cache.attachTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfAttach)
            }
        }
    }

    @objc @IBOutlet dynamic var bellTargets: [AnyObject]! {
        get { return Cache.bellTargets }
        set {
            Cache.bellTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfBell)
            }
        }
    }

    @objc @IBOutlet dynamic var callbackTargets: [AnyObject]! {
        get { return Cache.callbackTargets }
        set {
            Cache.callbackTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfCallback)
            }
        }
    }

    @objc @IBOutlet dynamic var arrowDownTargets: [AnyObject]! {
        get { return Cache.arrowDownTargets }
        set {
            Cache.arrowDownTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfArrowDown)
            }
        }
    }

    @objc @IBOutlet dynamic var sortTargets: [AnyObject]! {
        get { return Cache.sortTargets }
        set {
            Cache.sortTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfSort)
            }
        }
    }

    @objc @IBOutlet dynamic var filterOffTargets: [AnyObject]! {
        get { return Cache.filterOffTargets }
        set {
            Cache.filterOffTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfFilterOff)
            }
        }
    }

    @objc @IBOutlet dynamic var filterOnTargets: [AnyObject]! {
        get { return Cache.filterOnTargets }
        set {
            Cache.filterOnTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfFilterOn)
            }
        }
    }

    @objc @IBOutlet dynamic var phoneTargets: [AnyObject]! {
        get { return Cache.phoneTargets }
        set {
            Cache.phoneTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfPhone)
            }
        }
    }

    @objc @IBOutlet dynamic var mailTargets: [AnyObject]! {
        get { return Cache.mailTargets }
        set {
            Cache.mailTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfMail)
            }
        }
    }

    @objc @IBOutlet dynamic var calendarTargets: [AnyObject]! {
        get { return Cache.calendarTargets }
        set {
            Cache.calendarTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfCalendar)
            }
        }
    }

    @objc @IBOutlet dynamic var doneTargets: [AnyObject]! {
        get { return Cache.doneTargets }
        set {
            Cache.doneTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfDone)
            }
        }
    }

    @objc @IBOutlet dynamic var queryTargets: [AnyObject]! {
        get { return Cache.queryTargets }
        set {
            Cache.queryTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfQuery)
            }
        }
    }

    @objc @IBOutlet dynamic var trophyTargets: [AnyObject]! {
        get { return Cache.trophyTargets }
        set {
            Cache.trophyTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfTrophy)
            }
        }
    }

    @objc @IBOutlet dynamic var searchIconTargets: [AnyObject]! {
        get { return Cache.searchIconTargets }
        set {
            Cache.searchIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfSearchIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var favoritesIconTargets: [AnyObject]! {
        get { return Cache.favoritesIconTargets }
        set {
            Cache.favoritesIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfFavoritesIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var feedbackIconTargets: [AnyObject]! {
        get { return Cache.feedbackIconTargets }
        set {
            Cache.feedbackIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfFeedbackIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var autorizedPofileIconTargets: [AnyObject]! {
        get { return Cache.autorizedPofileIconTargets }
        set {
            Cache.autorizedPofileIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfAutorizedPofileIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var unautorizedPofileIconTargets: [AnyObject]! {
        get { return Cache.unautorizedPofileIconTargets }
        set {
            Cache.unautorizedPofileIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PulsStyleKit.imageOfUnautorizedPofileIcon)
            }
        }
    }




    @objc(PulsStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
