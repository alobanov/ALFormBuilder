//
//  ALFBStyle.swift
//  ALFBStyle
//
//  Created by Lobanov Aleksey on 30/10/2017.
//  Copyright Â© 2017 Home Inc. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class ALFBStyle : NSObject {

    //// Cache

    private struct Cache {
        static let fbLightFailure: UIColor = UIColor(red: 0.941, green: 0.459, blue: 0.431, alpha: 1.000)
        static let fbSuccess: UIColor = UIColor(red: 0.306, green: 0.639, blue: 0.243, alpha: 1.000)
        static let fbLightSuccess: UIColor = UIColor(red: 0.863, green: 0.929, blue: 0.847, alpha: 1.000)
        static let fbFailure: UIColor = UIColor(red: 0.812, green: 0.031, blue: 0.110, alpha: 1.000)
        static let fbUltraLightGray: UIColor = UIColor(red: 0.988, green: 0.988, blue: 0.988, alpha: 1.000)
        static let fbDarkGray: UIColor = UIColor(red: 0.302, green: 0.302, blue: 0.302, alpha: 1.000)
        static let fbLightGray: UIColor = UIColor(red: 0.855, green: 0.855, blue: 0.855, alpha: 1.000)
        static let fbGray: UIColor = UIColor(red: 0.753, green: 0.753, blue: 0.773, alpha: 1.000)
        static var imageOfCloseGray: UIImage?
        static var closeGrayTargets: [AnyObject]?
        static var imageOfTfSuccessIcon: UIImage?
        static var tfSuccessIconTargets: [AnyObject]?
        static var imageOfArrowBack: UIImage?
        static var arrowBackTargets: [AnyObject]?
        static var imageOfPhotodevice: UIImage?
        static var photodeviceTargets: [AnyObject]?
        static var imageOfTfAlertIcon: UIImage?
        static var tfAlertIconTargets: [AnyObject]?
        static var imageOfTfAlertIconStar: UIImage?
        static var tfAlertIconStarTargets: [AnyObject]?
        static var imageOfCloseWhite: UIImage?
        static var closeWhiteTargets: [AnyObject]?
    }

    //// Colors

    @objc dynamic public class var fbLightFailure: UIColor { return Cache.fbLightFailure }
    @objc dynamic public class var fbSuccess: UIColor { return Cache.fbSuccess }
    @objc dynamic public class var fbLightSuccess: UIColor { return Cache.fbLightSuccess }
    @objc dynamic public class var fbFailure: UIColor { return Cache.fbFailure }
    @objc dynamic public class var fbUltraLightGray: UIColor { return Cache.fbUltraLightGray }
    @objc dynamic public class var fbDarkGray: UIColor { return Cache.fbDarkGray }
    @objc dynamic public class var fbLightGray: UIColor { return Cache.fbLightGray }
    @objc dynamic public class var fbGray: UIColor { return Cache.fbGray }

    //// Drawing Methods

    @objc dynamic public class func drawCloseGray() {
        //// Color Declarations
        let gray = UIColor(red: 0.592, green: 0.592, blue: 0.592, alpha: 1.000)

        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 21.14, y: 3.26))
        bezier3Path.addCurve(to: CGPoint(x: 22, y: 4.13), controlPoint1: CGPoint(x: 21.14, y: 3.26), controlPoint2: CGPoint(x: 21.47, y: 3.59))
        bezier3Path.addCurve(to: CGPoint(x: 19.62, y: 6.55), controlPoint1: CGPoint(x: 21.4, y: 4.74), controlPoint2: CGPoint(x: 20.55, y: 5.6))
        bezier3Path.addCurve(to: CGPoint(x: 13.86, y: 12.4), controlPoint1: CGPoint(x: 17.37, y: 8.83), controlPoint2: CGPoint(x: 14.64, y: 11.61))
        bezier3Path.addCurve(to: CGPoint(x: 14.08, y: 12.63), controlPoint1: CGPoint(x: 14, y: 12.55), controlPoint2: CGPoint(x: 14.08, y: 12.63))
        bezier3Path.addCurve(to: CGPoint(x: 13.86, y: 12.86), controlPoint1: CGPoint(x: 14.08, y: 12.63), controlPoint2: CGPoint(x: 14, y: 12.71))
        bezier3Path.addCurve(to: CGPoint(x: 22, y: 21.13), controlPoint1: CGPoint(x: 14.97, y: 13.99), controlPoint2: CGPoint(x: 19.97, y: 19.07))
        bezier3Path.addCurve(to: CGPoint(x: 21.14, y: 22), controlPoint1: CGPoint(x: 21.47, y: 21.67), controlPoint2: CGPoint(x: 21.14, y: 22))
        bezier3Path.addCurve(to: CGPoint(x: 13, y: 13.73), controlPoint1: CGPoint(x: 21.14, y: 22), controlPoint2: CGPoint(x: 15.43, y: 16.2))
        bezier3Path.addCurve(to: CGPoint(x: 4.86, y: 22), controlPoint1: CGPoint(x: 10.57, y: 16.2), controlPoint2: CGPoint(x: 4.86, y: 22))
        bezier3Path.addCurve(to: CGPoint(x: 4, y: 21.13), controlPoint1: CGPoint(x: 4.86, y: 22), controlPoint2: CGPoint(x: 4.53, y: 21.67))
        bezier3Path.addCurve(to: CGPoint(x: 12.14, y: 12.86), controlPoint1: CGPoint(x: 6.03, y: 19.07), controlPoint2: CGPoint(x: 11.03, y: 13.99))
        bezier3Path.addCurve(to: CGPoint(x: 11.92, y: 12.63), controlPoint1: CGPoint(x: 12, y: 12.71), controlPoint2: CGPoint(x: 11.92, y: 12.63))
        bezier3Path.addCurve(to: CGPoint(x: 12.14, y: 12.4), controlPoint1: CGPoint(x: 11.92, y: 12.63), controlPoint2: CGPoint(x: 12, y: 12.55))
        bezier3Path.addCurve(to: CGPoint(x: 6.38, y: 6.55), controlPoint1: CGPoint(x: 11.36, y: 11.61), controlPoint2: CGPoint(x: 8.63, y: 8.83))
        bezier3Path.addCurve(to: CGPoint(x: 4, y: 4.13), controlPoint1: CGPoint(x: 5.45, y: 5.6), controlPoint2: CGPoint(x: 4.6, y: 4.74))
        bezier3Path.addCurve(to: CGPoint(x: 4.86, y: 3.26), controlPoint1: CGPoint(x: 4.53, y: 3.59), controlPoint2: CGPoint(x: 4.86, y: 3.26))
        bezier3Path.addCurve(to: CGPoint(x: 7.76, y: 6.2), controlPoint1: CGPoint(x: 4.86, y: 3.26), controlPoint2: CGPoint(x: 6.14, y: 4.57))
        bezier3Path.addCurve(to: CGPoint(x: 13, y: 11.53), controlPoint1: CGPoint(x: 9.54, y: 8.02), controlPoint2: CGPoint(x: 11.72, y: 10.23))
        bezier3Path.addCurve(to: CGPoint(x: 18.24, y: 6.2), controlPoint1: CGPoint(x: 14.28, y: 10.23), controlPoint2: CGPoint(x: 16.46, y: 8.02))
        bezier3Path.addCurve(to: CGPoint(x: 21.14, y: 3.26), controlPoint1: CGPoint(x: 19.81, y: 4.62), controlPoint2: CGPoint(x: 21.06, y: 3.34))
        bezier3Path.addLine(to: CGPoint(x: 21.14, y: 3.26))
        bezier3Path.close()
        gray.setFill()
        bezier3Path.fill()
    }

    @objc dynamic public class func drawTfSuccessIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let colorOkValidation2 = UIColor(red: 0.306, green: 0.639, blue: 0.243, alpha: 1.000)

        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 15.02, y: 7))
        clipPath.addCurve(to: CGPoint(x: 14.17, y: 7.32), controlPoint1: CGPoint(x: 14.72, y: 6.99), controlPoint2: CGPoint(x: 14.41, y: 7.09))
        clipPath.addLine(to: CGPoint(x: 8.92, y: 12.58))
        clipPath.addLine(to: CGPoint(x: 5.93, y: 9.6))
        clipPath.addCurve(to: CGPoint(x: 5.08, y: 9.27), controlPoint1: CGPoint(x: 5.7, y: 9.36), controlPoint2: CGPoint(x: 5.39, y: 9.26))
        clipPath.addCurve(to: CGPoint(x: 4.33, y: 9.6), controlPoint1: CGPoint(x: 4.81, y: 9.28), controlPoint2: CGPoint(x: 4.54, y: 9.39))
        clipPath.addCurve(to: CGPoint(x: 4, y: 10.36), controlPoint1: CGPoint(x: 4.11, y: 9.81), controlPoint2: CGPoint(x: 4.01, y: 10.08))
        clipPath.addCurve(to: CGPoint(x: 4.33, y: 11.2), controlPoint1: CGPoint(x: 3.99, y: 10.66), controlPoint2: CGPoint(x: 4.09, y: 10.97))
        clipPath.addLine(to: CGPoint(x: 8.11, y: 14.99))
        clipPath.addCurve(to: CGPoint(x: 8.92, y: 15.33), controlPoint1: CGPoint(x: 8.34, y: 15.21), controlPoint2: CGPoint(x: 8.63, y: 15.33))
        clipPath.addCurve(to: CGPoint(x: 9.72, y: 14.99), controlPoint1: CGPoint(x: 9.21, y: 15.33), controlPoint2: CGPoint(x: 9.5, y: 15.21))
        clipPath.addLine(to: CGPoint(x: 15.78, y: 8.93))
        clipPath.addCurve(to: CGPoint(x: 16.1, y: 8.08), controlPoint1: CGPoint(x: 16.01, y: 8.7), controlPoint2: CGPoint(x: 16.12, y: 8.39))
        clipPath.addCurve(to: CGPoint(x: 15.78, y: 7.32), controlPoint1: CGPoint(x: 16.09, y: 7.81), controlPoint2: CGPoint(x: 15.99, y: 7.54))
        clipPath.addCurve(to: CGPoint(x: 15.02, y: 7), controlPoint1: CGPoint(x: 15.57, y: 7.11), controlPoint2: CGPoint(x: 15.3, y: 7.01))
        clipPath.addLine(to: CGPoint(x: 15.02, y: 7))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -1, y: 1.98, width: 22.1, height: 18.35))
        colorOkValidation2.setFill()
        rectanglePath.fill()


        context.endTransparencyLayer()
        context.restoreGState()
    }

    @objc dynamic public class func drawArrowBack() {
        //// Color Declarations
        let gray = UIColor(red: 0.592, green: 0.592, blue: 0.592, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16.81, y: 3.26))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 4.46), controlPoint1: CGPoint(x: 16.81, y: 3.26), controlPoint2: CGPoint(x: 17.26, y: 3.72))
        bezierPath.addCurve(to: CGPoint(x: 14.69, y: 7.78), controlPoint1: CGPoint(x: 17.17, y: 5.29), controlPoint2: CGPoint(x: 15.99, y: 6.48))
        bezierPath.addCurve(to: CGPoint(x: 6.38, y: 16.13), controlPoint1: CGPoint(x: 11, y: 11.49), controlPoint2: CGPoint(x: 6.38, y: 16.13))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 27.8), controlPoint1: CGPoint(x: 6.38, y: 16.13), controlPoint2: CGPoint(x: 14.82, y: 24.61))
        bezierPath.addCurve(to: CGPoint(x: 16.81, y: 29), controlPoint1: CGPoint(x: 17.26, y: 28.54), controlPoint2: CGPoint(x: 16.81, y: 29))
        bezierPath.addLine(to: CGPoint(x: 4, y: 16.13))
        bezierPath.addCurve(to: CGPoint(x: 12.78, y: 7.3), controlPoint1: CGPoint(x: 4, y: 16.13), controlPoint2: CGPoint(x: 9.03, y: 11.08))
        bezierPath.addCurve(to: CGPoint(x: 16.81, y: 3.26), controlPoint1: CGPoint(x: 15.02, y: 5.05), controlPoint2: CGPoint(x: 16.81, y: 3.26))
        bezierPath.addLine(to: CGPoint(x: 16.81, y: 3.26))
        bezierPath.close()
        gray.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawPhotodevice() {
        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 18, y: 18, width: 12, height: 12))
        white.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 32.57, y: 14.43))
        bezierPath.addLine(to: CGPoint(x: 31.28, y: 14.43))
        bezierPath.addLine(to: CGPoint(x: 30.35, y: 12.15))
        bezierPath.addCurve(to: CGPoint(x: 28.5, y: 11), controlPoint1: CGPoint(x: 30, y: 11.44), controlPoint2: CGPoint(x: 29.29, y: 11))
        bezierPath.addLine(to: CGPoint(x: 19.5, y: 11))
        bezierPath.addCurve(to: CGPoint(x: 17.65, y: 12.14), controlPoint1: CGPoint(x: 18.71, y: 11), controlPoint2: CGPoint(x: 18, y: 11.44))
        bezierPath.addLine(to: CGPoint(x: 16.72, y: 14.43))
        bezierPath.addLine(to: CGPoint(x: 15.43, y: 14.43))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 17.86), controlPoint1: CGPoint(x: 13.53, y: 14.43), controlPoint2: CGPoint(x: 12, y: 15.96))
        bezierPath.addLine(to: CGPoint(x: 12, y: 31.57))
        bezierPath.addCurve(to: CGPoint(x: 15.43, y: 35), controlPoint1: CGPoint(x: 12, y: 33.47), controlPoint2: CGPoint(x: 13.53, y: 35))
        bezierPath.addLine(to: CGPoint(x: 32.57, y: 35))
        bezierPath.addCurve(to: CGPoint(x: 36, y: 31.57), controlPoint1: CGPoint(x: 34.47, y: 35), controlPoint2: CGPoint(x: 36, y: 33.47))
        bezierPath.addLine(to: CGPoint(x: 36, y: 17.86))
        bezierPath.addCurve(to: CGPoint(x: 32.57, y: 14.43), controlPoint1: CGPoint(x: 36, y: 15.96), controlPoint2: CGPoint(x: 34.47, y: 14.43))
        bezierPath.addLine(to: CGPoint(x: 32.57, y: 14.43))
        bezierPath.close()
        white.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
    }

    @objc dynamic public class func drawTfAlertIcon() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 9, y: 11.9))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 13), controlPoint1: CGPoint(x: 9, y: 12.51), controlPoint2: CGPoint(x: 9.45, y: 13))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 11.9), controlPoint1: CGPoint(x: 10.55, y: 13), controlPoint2: CGPoint(x: 11, y: 12.51))
        bezierPath.addLine(to: CGPoint(x: 11.93, y: 4.75))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 4.2), controlPoint1: CGPoint(x: 11.97, y: 4.58), controlPoint2: CGPoint(x: 12, y: 4.39))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 12, y: 2.98), controlPoint2: CGPoint(x: 11.1, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 4.2), controlPoint1: CGPoint(x: 8.89, y: 2), controlPoint2: CGPoint(x: 8, y: 2.98))
        bezierPath.addCurve(to: CGPoint(x: 8.07, y: 4.75), controlPoint1: CGPoint(x: 8, y: 4.39), controlPoint2: CGPoint(x: 8.03, y: 4.58))
        bezierPath.addLine(to: CGPoint(x: 9, y: 11.9))
        bezierPath.addLine(to: CGPoint(x: 9, y: 11.9))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 8.5, y: 17.5), controlPoint1: CGPoint(x: 9.17, y: 16), controlPoint2: CGPoint(x: 8.5, y: 16.67))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 19), controlPoint1: CGPoint(x: 8.5, y: 18.33), controlPoint2: CGPoint(x: 9.17, y: 19))
        bezierPath.addCurve(to: CGPoint(x: 11.5, y: 17.5), controlPoint1: CGPoint(x: 10.83, y: 19), controlPoint2: CGPoint(x: 11.5, y: 18.33))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 16), controlPoint1: CGPoint(x: 11.5, y: 16.67), controlPoint2: CGPoint(x: 10.83, y: 16))
        bezierPath.addLine(to: CGPoint(x: 10, y: 16))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        UIColor.red.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawTfAlertIconStar() {
        //// Color Declarations
        let colorErrorValidation = UIColor(red: 0.812, green: 0.031, blue: 0.110, alpha: 1.000)

        //// tfAlertStar Drawing
        let tfAlertStarRect = CGRect(x: 2, y: -2, width: 16, height: 27)
        let tfAlertStarStyle = NSMutableParagraphStyle()
        tfAlertStarStyle.alignment = .center
        let tfAlertStarFontAttributes = [
            NSFontAttributeName: UIFont(name: "AvenirNext-Regular", size: 26)!,
            NSForegroundColorAttributeName: colorErrorValidation,
            NSParagraphStyleAttributeName: tfAlertStarStyle,
        ]

        "*".draw(in: tfAlertStarRect, withAttributes: tfAlertStarFontAttributes)
    }

    @objc dynamic public class func drawCloseBtn(customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 17, height: 17))
        customColor.setFill()
        ovalPath.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 7, y: 7))
        bezier3Path.addLine(to: CGPoint(x: 14, y: 14))
        bezier3Path.move(to: CGPoint(x: 14, y: 7))
        bezier3Path.addLine(to: CGPoint(x: 7, y: 14))
        white.setFill()
        bezier3Path.fill()
        white.setStroke()
        bezier3Path.lineWidth = 2
        bezier3Path.stroke()
    }

    @objc dynamic public class func drawCloseWhite() {
        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 21.14, y: 3.26))
        bezier3Path.addCurve(to: CGPoint(x: 22, y: 4.13), controlPoint1: CGPoint(x: 21.14, y: 3.26), controlPoint2: CGPoint(x: 21.47, y: 3.59))
        bezier3Path.addCurve(to: CGPoint(x: 19.62, y: 6.55), controlPoint1: CGPoint(x: 21.4, y: 4.74), controlPoint2: CGPoint(x: 20.55, y: 5.6))
        bezier3Path.addCurve(to: CGPoint(x: 13.86, y: 12.4), controlPoint1: CGPoint(x: 17.37, y: 8.83), controlPoint2: CGPoint(x: 14.64, y: 11.61))
        bezier3Path.addCurve(to: CGPoint(x: 14.08, y: 12.63), controlPoint1: CGPoint(x: 14, y: 12.55), controlPoint2: CGPoint(x: 14.08, y: 12.63))
        bezier3Path.addCurve(to: CGPoint(x: 13.86, y: 12.86), controlPoint1: CGPoint(x: 14.08, y: 12.63), controlPoint2: CGPoint(x: 14, y: 12.71))
        bezier3Path.addCurve(to: CGPoint(x: 22, y: 21.13), controlPoint1: CGPoint(x: 14.97, y: 13.99), controlPoint2: CGPoint(x: 19.97, y: 19.07))
        bezier3Path.addCurve(to: CGPoint(x: 21.14, y: 22), controlPoint1: CGPoint(x: 21.47, y: 21.67), controlPoint2: CGPoint(x: 21.14, y: 22))
        bezier3Path.addCurve(to: CGPoint(x: 13, y: 13.73), controlPoint1: CGPoint(x: 21.14, y: 22), controlPoint2: CGPoint(x: 15.43, y: 16.2))
        bezier3Path.addCurve(to: CGPoint(x: 4.86, y: 22), controlPoint1: CGPoint(x: 10.57, y: 16.2), controlPoint2: CGPoint(x: 4.86, y: 22))
        bezier3Path.addCurve(to: CGPoint(x: 4, y: 21.13), controlPoint1: CGPoint(x: 4.86, y: 22), controlPoint2: CGPoint(x: 4.53, y: 21.67))
        bezier3Path.addCurve(to: CGPoint(x: 12.14, y: 12.86), controlPoint1: CGPoint(x: 6.03, y: 19.07), controlPoint2: CGPoint(x: 11.03, y: 13.99))
        bezier3Path.addCurve(to: CGPoint(x: 11.92, y: 12.63), controlPoint1: CGPoint(x: 12, y: 12.71), controlPoint2: CGPoint(x: 11.92, y: 12.63))
        bezier3Path.addCurve(to: CGPoint(x: 12.14, y: 12.4), controlPoint1: CGPoint(x: 11.92, y: 12.63), controlPoint2: CGPoint(x: 12, y: 12.55))
        bezier3Path.addCurve(to: CGPoint(x: 6.38, y: 6.55), controlPoint1: CGPoint(x: 11.36, y: 11.61), controlPoint2: CGPoint(x: 8.63, y: 8.83))
        bezier3Path.addCurve(to: CGPoint(x: 4, y: 4.13), controlPoint1: CGPoint(x: 5.45, y: 5.6), controlPoint2: CGPoint(x: 4.6, y: 4.74))
        bezier3Path.addCurve(to: CGPoint(x: 4.86, y: 3.26), controlPoint1: CGPoint(x: 4.53, y: 3.59), controlPoint2: CGPoint(x: 4.86, y: 3.26))
        bezier3Path.addCurve(to: CGPoint(x: 7.76, y: 6.2), controlPoint1: CGPoint(x: 4.86, y: 3.26), controlPoint2: CGPoint(x: 6.14, y: 4.57))
        bezier3Path.addCurve(to: CGPoint(x: 13, y: 11.53), controlPoint1: CGPoint(x: 9.54, y: 8.02), controlPoint2: CGPoint(x: 11.72, y: 10.23))
        bezier3Path.addCurve(to: CGPoint(x: 18.24, y: 6.2), controlPoint1: CGPoint(x: 14.28, y: 10.23), controlPoint2: CGPoint(x: 16.46, y: 8.02))
        bezier3Path.addCurve(to: CGPoint(x: 21.14, y: 3.26), controlPoint1: CGPoint(x: 19.81, y: 4.62), controlPoint2: CGPoint(x: 21.06, y: 3.34))
        bezier3Path.addLine(to: CGPoint(x: 21.14, y: 3.26))
        bezier3Path.close()
        white.setFill()
        bezier3Path.fill()
        white.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()
    }

    @objc dynamic public class func drawNoAavatar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit, customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 30, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 30), controlPoint1: CGPoint(x: 14.54, y: 2), controlPoint2: CGPoint(x: 2, y: 14.54))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 58), controlPoint1: CGPoint(x: 2, y: 45.46), controlPoint2: CGPoint(x: 14.54, y: 58))
        bezierPath.addCurve(to: CGPoint(x: 58, y: 30), controlPoint1: CGPoint(x: 45.46, y: 58), controlPoint2: CGPoint(x: 58, y: 45.46))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 2), controlPoint1: CGPoint(x: 58, y: 14.54), controlPoint2: CGPoint(x: 45.46, y: 2))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 30, y: 10.4))
        bezierPath.addCurve(to: CGPoint(x: 38.4, y: 18.8), controlPoint1: CGPoint(x: 34.65, y: 10.4), controlPoint2: CGPoint(x: 38.4, y: 14.15))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 27.2), controlPoint1: CGPoint(x: 38.4, y: 23.45), controlPoint2: CGPoint(x: 34.65, y: 27.2))
        bezierPath.addCurve(to: CGPoint(x: 21.6, y: 18.8), controlPoint1: CGPoint(x: 25.35, y: 27.2), controlPoint2: CGPoint(x: 21.6, y: 23.45))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 10.4), controlPoint1: CGPoint(x: 21.6, y: 14.15), controlPoint2: CGPoint(x: 25.35, y: 10.4))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 30, y: 50.16))
        bezierPath.addCurve(to: CGPoint(x: 13.2, y: 41.14), controlPoint1: CGPoint(x: 23, y: 50.16), controlPoint2: CGPoint(x: 16.81, y: 46.58))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 32.52), controlPoint1: CGPoint(x: 13.28, y: 35.57), controlPoint2: CGPoint(x: 24.4, y: 32.52))
        bezierPath.addCurve(to: CGPoint(x: 46.8, y: 41.14), controlPoint1: CGPoint(x: 35.57, y: 32.52), controlPoint2: CGPoint(x: 46.72, y: 35.57))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 50.16), controlPoint1: CGPoint(x: 43.19, y: 46.58), controlPoint2: CGPoint(x: 37, y: 50.16))
        bezierPath.close()
        customColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDisclosure(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 11, height: 16), resizing: ResizingBehavior = .aspectFit, customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 11, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 11, y: resizedFrame.height / 16)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 2, y: 12.59))
        bezierPath.addLine(to: CGPoint(x: 6.58, y: 8))
        bezierPath.addLine(to: CGPoint(x: 2, y: 3.41))
        bezierPath.addLine(to: CGPoint(x: 3.41, y: 2))
        bezierPath.addLine(to: CGPoint(x: 9.41, y: 8))
        bezierPath.addLine(to: CGPoint(x: 3.41, y: 14))
        bezierPath.addLine(to: CGPoint(x: 2, y: 12.59))
        bezierPath.close()
        customColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPhotoAdd(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit, customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6, y: 8))
        bezierPath.addLine(to: CGPoint(x: 6, y: 2))
        bezierPath.addLine(to: CGPoint(x: 10, y: 2))
        bezierPath.addLine(to: CGPoint(x: 10, y: 8))
        bezierPath.addLine(to: CGPoint(x: 16, y: 8))
        bezierPath.addLine(to: CGPoint(x: 16, y: 12))
        bezierPath.addLine(to: CGPoint(x: 10, y: 12))
        bezierPath.addLine(to: CGPoint(x: 10, y: 18))
        bezierPath.addLine(to: CGPoint(x: 6, y: 18))
        bezierPath.addLine(to: CGPoint(x: 6, y: 12))
        bezierPath.addLine(to: CGPoint(x: 0, y: 12))
        bezierPath.addLine(to: CGPoint(x: 0, y: 8))
        bezierPath.addLine(to: CGPoint(x: 6, y: 8))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 12, y: 20))
        bezierPath.addLine(to: CGPoint(x: 12, y: 14))
        bezierPath.addLine(to: CGPoint(x: 18, y: 14))
        bezierPath.addLine(to: CGPoint(x: 18, y: 8))
        bezierPath.addLine(to: CGPoint(x: 32, y: 8))
        bezierPath.addLine(to: CGPoint(x: 35.66, y: 12))
        bezierPath.addLine(to: CGPoint(x: 42, y: 12))
        bezierPath.addCurve(to: CGPoint(x: 46, y: 16), controlPoint1: CGPoint(x: 44.2, y: 12), controlPoint2: CGPoint(x: 46, y: 13.8))
        bezierPath.addLine(to: CGPoint(x: 46, y: 40))
        bezierPath.addCurve(to: CGPoint(x: 42, y: 44), controlPoint1: CGPoint(x: 46, y: 42.2), controlPoint2: CGPoint(x: 44.2, y: 44))
        bezierPath.addLine(to: CGPoint(x: 10, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 40), controlPoint1: CGPoint(x: 7.8, y: 44), controlPoint2: CGPoint(x: 6, y: 42.2))
        bezierPath.addLine(to: CGPoint(x: 6, y: 20))
        bezierPath.addLine(to: CGPoint(x: 12, y: 20))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 26, y: 38))
        bezierPath.addCurve(to: CGPoint(x: 36, y: 28), controlPoint1: CGPoint(x: 31.52, y: 38), controlPoint2: CGPoint(x: 36, y: 33.52))
        bezierPath.addCurve(to: CGPoint(x: 26, y: 18), controlPoint1: CGPoint(x: 36, y: 22.48), controlPoint2: CGPoint(x: 31.52, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 28), controlPoint1: CGPoint(x: 20.48, y: 18), controlPoint2: CGPoint(x: 16, y: 22.48))
        bezierPath.addCurve(to: CGPoint(x: 26, y: 38), controlPoint1: CGPoint(x: 16, y: 33.52), controlPoint2: CGPoint(x: 20.48, y: 38))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 19.6, y: 28))
        bezierPath.addCurve(to: CGPoint(x: 26, y: 34.4), controlPoint1: CGPoint(x: 19.6, y: 31.54), controlPoint2: CGPoint(x: 22.46, y: 34.4))
        bezierPath.addCurve(to: CGPoint(x: 32.4, y: 28), controlPoint1: CGPoint(x: 29.54, y: 34.4), controlPoint2: CGPoint(x: 32.4, y: 31.54))
        bezierPath.addCurve(to: CGPoint(x: 26, y: 21.6), controlPoint1: CGPoint(x: 32.4, y: 24.46), controlPoint2: CGPoint(x: 29.54, y: 21.6))
        bezierPath.addCurve(to: CGPoint(x: 19.6, y: 28), controlPoint1: CGPoint(x: 22.46, y: 21.6), controlPoint2: CGPoint(x: 19.6, y: 24.46))
        bezierPath.close()
        customColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfCloseGray: UIImage {
        if Cache.imageOfCloseGray != nil {
            return Cache.imageOfCloseGray!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 25), false, 0)
            ALFBStyle.drawCloseGray()

        Cache.imageOfCloseGray = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfCloseGray!
    }

    @objc dynamic public class var imageOfTfSuccessIcon: UIImage {
        if Cache.imageOfTfSuccessIcon != nil {
            return Cache.imageOfTfSuccessIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            ALFBStyle.drawTfSuccessIcon()

        Cache.imageOfTfSuccessIcon = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfTfSuccessIcon!
    }

    @objc dynamic public class var imageOfArrowBack: UIImage {
        if Cache.imageOfArrowBack != nil {
            return Cache.imageOfArrowBack!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 26, height: 34), false, 0)
            ALFBStyle.drawArrowBack()

        Cache.imageOfArrowBack = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfArrowBack!
    }

    @objc dynamic public class var imageOfPhotodevice: UIImage {
        if Cache.imageOfPhotodevice != nil {
            return Cache.imageOfPhotodevice!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
            ALFBStyle.drawPhotodevice()

        Cache.imageOfPhotodevice = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfPhotodevice!
    }

    @objc dynamic public class var imageOfTfAlertIcon: UIImage {
        if Cache.imageOfTfAlertIcon != nil {
            return Cache.imageOfTfAlertIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            ALFBStyle.drawTfAlertIcon()

        Cache.imageOfTfAlertIcon = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfTfAlertIcon!
    }

    @objc dynamic public class var imageOfTfAlertIconStar: UIImage {
        if Cache.imageOfTfAlertIconStar != nil {
            return Cache.imageOfTfAlertIconStar!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            ALFBStyle.drawTfAlertIconStar()

        Cache.imageOfTfAlertIconStar = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfTfAlertIconStar!
    }

    @objc dynamic public class func imageOfCloseBtn(customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 21, height: 21), false, 0)
            ALFBStyle.drawCloseBtn(customColor: customColor)

        let imageOfCloseBtn = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return imageOfCloseBtn
    }

    @objc dynamic public class var imageOfCloseWhite: UIImage {
        if Cache.imageOfCloseWhite != nil {
            return Cache.imageOfCloseWhite!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 25), false, 0)
            ALFBStyle.drawCloseWhite()

        Cache.imageOfCloseWhite = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfCloseWhite!
    }

    @objc dynamic public class func imageOfNoAavatar(customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
            ALFBStyle.drawNoAavatar(customColor: customColor)

        let imageOfNoAavatar = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfNoAavatar
    }

    @objc dynamic public class func imageOfDisclosure(customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 11, height: 16), false, 0)
            ALFBStyle.drawDisclosure(customColor: customColor)

        let imageOfDisclosure = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfDisclosure
    }

    @objc dynamic public class func imageOfPhotoAdd(customColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
            ALFBStyle.drawPhotoAdd(customColor: customColor)

        let imageOfPhotoAdd = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfPhotoAdd
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var closeGrayTargets: [AnyObject]! {
        get { return Cache.closeGrayTargets }
        set {
            Cache.closeGrayTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: ALFBStyle.imageOfCloseGray)
            }
        }
    }

    @objc @IBOutlet dynamic var tfSuccessIconTargets: [AnyObject]! {
        get { return Cache.tfSuccessIconTargets }
        set {
            Cache.tfSuccessIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: ALFBStyle.imageOfTfSuccessIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var arrowBackTargets: [AnyObject]! {
        get { return Cache.arrowBackTargets }
        set {
            Cache.arrowBackTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: ALFBStyle.imageOfArrowBack)
            }
        }
    }

    @objc @IBOutlet dynamic var photodeviceTargets: [AnyObject]! {
        get { return Cache.photodeviceTargets }
        set {
            Cache.photodeviceTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: ALFBStyle.imageOfPhotodevice)
            }
        }
    }

    @objc @IBOutlet dynamic var tfAlertIconTargets: [AnyObject]! {
        get { return Cache.tfAlertIconTargets }
        set {
            Cache.tfAlertIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: ALFBStyle.imageOfTfAlertIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var tfAlertIconStarTargets: [AnyObject]! {
        get { return Cache.tfAlertIconStarTargets }
        set {
            Cache.tfAlertIconStarTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: ALFBStyle.imageOfTfAlertIconStar)
            }
        }
    }

    @objc @IBOutlet dynamic var closeWhiteTargets: [AnyObject]! {
        get { return Cache.closeWhiteTargets }
        set {
            Cache.closeWhiteTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: ALFBStyle.imageOfCloseWhite)
            }
        }
    }




    @objc(ALFBStyleResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
